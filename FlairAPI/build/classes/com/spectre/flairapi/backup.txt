public AssetManager getNewAssetManager(){
        
        AssetManager assetManager = JmeSystem.newAssetManager(
                    Thread.currentThread().getContextClassLoader()
                    .getResource("FlairAPI/src/Models/Desktop.cfg"));
        File f = new File("FlairAPI/src/Models/");
        assetManager.registerLocator(f.getAbsolutePath(), FileLocator.class.getName());
     
        assetManager.registerLoader(com.jme3.export.binary.BinaryImporter.class, "j3o");    
        assetManager.registerLoader(com.jme3.material.plugins.J3MLoader.class, "j3md","j3m");    
        
        return assetManager;
    }
    

//            
//            SceneApplication.getApplication().addSceneListener(new SceneListener() {
//    
//                @Override
//                public void sceneRequested(SceneRequest request) {
//                    if (request.getRequester() == SceneDirector.this) {
//                        SceneApplication.getApplication().enqueue(new Callable() {
//    
//                            @Override
//                            public Object call() throws Exception {
//                                SceneApplication.getApplication().getViewPort().getScenes().get(0).addLight(dirLight);
//                               // rootNode.attachChild(model);
////                                File f = new File("Models/Alexjk.j3o");
////                                if (!f.isFile()) {
////                                    throw new IllegalStateException("Cannot Locate File!");
////                                }
////                                FileObject fileObject = FileUtil.toFileObject(f);
////                                //fileObject.isValid(); 
////                                final ProjectAssetManager manager = DataObject.find(fileObject).getLookup().lookup(ProjectAssetManager.class);
////                                if (manager == null) {
////                                    throw new IllegalStateException("Cannot Locate ProjectAssetManager!");
////                                }
//                                SceneApplication.getApplication().getCamera().setLocation(new Vector3f(0, 0, 0));
////                                DataObject modelTarget = DataObject.find(fileObject);
////                                if (modelTarget instanceof SpatialAssetDataObject) {
////                                    //TODO: wtf? why do i have to add the assetmanager?
////                                    ((SpatialAssetDataObject) modelTarget).getLookupContents().add(manager);
////                                    Spatial model = ((SpatialAssetDataObject) modelTarget).loadAsset();
////                                    if (model == null) {
////                                        throw new IllegalStateException("Cannot load model");
////                                    } else {
////                                        //Spatial model = manager.loadModel("Alex.j3o");
//                                       // rootNode.setLocalTranslation(0, 0, 0);
////                                        // attach the nifty display to the gui view port as a processor
////                                        rootNode.attachChild(model);
//                                       // SceneApplication.getApplication().getViewPort().attachScene(rootNode);
////                                    }
////                                }
//    
//                                return null;
//                            }
//                        });
//                    }
//                }
//    
//                @Override
//                public boolean sceneClose(SceneRequest sr) {
//                    throw new UnsupportedOperationException("Not supported yet.");
//                }
//    
//                @Override
//                public void previewRequested(PreviewRequest pr) {
//                    // throw new UnsupportedOperationException("Not supported yet.");
//                }
//            });
    //    public final com.jme3.scene.Node rootNode = new com.jme3.scene.Node("MyRootNode");
    //
    //    static {
    //        Project proj = null;
    //        for (Project pro : OpenProjects.getDefault().getOpenProjects()) {
    //            if ("ShadowOfIllusions".equalsIgnoreCase(proj.getProjectDirectory().getName())) {
    //                proj = pro;
    //                break;
    //            }
    //        }
    //        if(proj==null){
    //            JOptionPane.showMessageDialog(null, "UNABLE TO LOCATE PROJECT SHADOWOFILLUSIONS");
    //        }
    //        JOptionPane.showMessageDialog(null, proj.getProjectDirectory().getName());
    //
    //        //FileObject root = proj.getProjectDirectory();
    //        //String path = FileUtil.toFile(root).getAbsolutePath();
    //    }
    //
    //    private void registerSceneListener() {
    //        SceneApplication.getApplication().addSceneListener(this);
    //    }
    //
    //    private void requestScene() {
    //        JmeNode jmeNode = NodeUtility.createNode(rootNode);
    //        //SceneRequest request = new SceneRequest(this, jmeNode, assetManager);
    //        //SceneApplication.getApplication().requestScene(request);
    //    }
    //
    //    @Override
    //    public void sceneRequested(SceneRequest request) {
    //        if (request.getRequester() == this) {
    //            //we now own the scene
    //        }
    //    }
    //
    //    @Override
    //    public boolean sceneClose(SceneRequest request) {
    //        if (request.getRequester() == this) {
    //            //if (isNotSaved()) {
    //            //    return false;
    //            // }
    //        }
    //        return true;
    //    }
    //
    //    @Override
    //    public void previewRequested(PreviewRequest pr) {
    //        throw new UnsupportedOperationException("Not supported yet.");
    //    }
    //    private Result<JmeSpatial> result;
    //
    //    private void registerListener() {
    //        result = Utilities.actionsGlobalContext().lookupResult(JmeSpatial.class);
    //        result.addLookupListener(this);
    //    }
    //
    //    @Override
    //        });
    ////        Collection<JmeSpatial> items = (Collection<JmeSpatial>) result.allInstances();
    ////        for (JmeSpatial jmeSpatial : items) {
    ////            //Using the JmeSpatials properties you can modify the spatial directly from the AWT thre
    ////            jmeSpatial.getPropertySets()[0].setValue("Local Translation", Vector3f.ZERO);
    ////            return;
    ////        }
    ////
    ////
    ////
    ////        for (JmeSpatial jmeSpatial : items) {
    ////            //the spatial is stored inside the JmeSpatials "Lookup", a general container for Objects
    ////            final Spatial realSpatial = jmeSpatial.getLookup().lookup(Spatial.class);
    ////            //use a Callable to execute on the render thread:
    ////            SceneApplication.getApplication().enqueue(new Callable() {
    ////
    ////                @Override
    ////                public Object call() throws Exception {
    ////                    realSpatial.setLocalTranslation(Vector3f.ZERO);
    ////                    return null;
    ////                }
    ////            });
    ////            return;
    ////        }
    //    }
    //        private static JFileChooser fc = new JFileChooser() {
    //
    //        {
    //            //this.setFileSelectionMode(1);
    //        }
    //    };
    //    public static void addModel(){
    //        try {
    //            fc.showDialog(null, "Load Asset");
    //            FileObject f = FileUtil.toFileObject(fc.getSelectedFile());
    //            MultiFileLoader mc = new BinaryModelFileLoader();
    //            final OgreBinaryMeshDataObject  context = new OgreBinaryMeshDataObject(f,mc);
    //             final ProjectAssetManager manager = context.getLookup().lookup(ProjectAssetManager.class);
    //            if (manager == null) {
    //                return;
    //            }
    //            Runnable call = new Runnable() {
    //
    //                public void run() {
    //                    ProgressHandle progressHandle = ProgressHandleFactory.createHandle("Opening Model");
    //                    progressHandle.start();
    //                    try {
    //                        manager.clearCache();
    //
    //                        final Spatial asset = context.loadAsset();
    //
    //                        if (asset != null) {
    //                            Node node = null;
    //                            if (asset instanceof Node) {
    //                                node = (Node) asset;
    //                            } else {
    //                                node = new Node("RootNode");
    //                                node.attachChild(asset);
    //                            }
    //                            JmeNode jmeNode = NodeUtility.createNode(node);
    //                            SceneApplication app = SceneApplication.getApplication();
    //                            SceneRequest request = new SceneRequest(app, jmeNode, manager);
    //                            request.setWindowTitle("SceneViewer - View Model");
    //                            app.requestScene(request);
    //                        } else {
    //                            Confirmation msg = new NotifyDescriptor.Confirmation(
    //                                    "Error opening " + context.getPrimaryFile().getNameExt(),
    //                                    NotifyDescriptor.OK_CANCEL_OPTION,
    //                                    NotifyDescriptor.ERROR_MESSAGE);
    //                            DialogDisplayer.getDefault().notify(msg);
    //                        }
    //                    }catch(Exception e){
    //                        e.printStackTrace();
    //                    }finally {
    //                        progressHandle.finish();
    //                    }
    //                }
    //            };
    //            new Thread(call).start();
    //        } catch (IOException ex) {
    //            Exceptions.printStackTrace(ex);
    //        }
    //    }
    //
    //    public void OpenModel(SpatialAssetDataObject context){
    //         FileObject root = FileUtil.toFileObject(new File(""));
    //
    //
    //        JarFile l;
    //        //OpenModel openModel = new OpenModel(new SpatialAssetDataObject(null,null));
    //    }
    //
    //    public final com.jme3.scene.Node rootNode = new com.jme3.scene.Node("MyRootNode");
    //
    //    static {
    //        Project proj = null;
    //        for (Project pro : OpenProjects.getDefault().getOpenProjects()) {
    //            if ("ShadowOfIllusions".equalsIgnoreCase(proj.getProjectDirectory().getName())) {
    //                proj = pro;
    //                break;
    //            }
    //        }
    //        if(proj==null){
    //            JOptionPane.showMessageDialog(null, "UNABLE TO LOCATE PROJECT SHADOWOFILLUSIONS");
    //        }
    //        JOptionPane.showMessageDialog(null, proj.getProjectDirectory().getName());
    //
    //        //FileObject root = proj.getProjectDirectory();
    //        //String path = FileUtil.toFile(root).getAbsolutePath();
    //    }
    //
    //    private void registerSceneListener() {
    //        SceneApplication.getApplication().addSceneListener(this);
    //    }
    //
    //    private void requestScene() {
    //        JmeNode jmeNode = NodeUtility.createNode(rootNode);
    //        //SceneRequest request = new SceneRequest(this, jmeNode, assetManager);
    //        //SceneApplication.getApplication().requestScene(request);
    //    }
    //
    //    @Override
    //    public void sceneRequested(SceneRequest request) {
    //        if (request.getRequester() == this) {
    //            //we now own the scene
    //        }
    //    }
    //
    //    @Override
    //    public boolean sceneClose(SceneRequest request) {
    //        if (request.getRequester() == this) {
    //            //if (isNotSaved()) {
    //            //    return false;
    //            // }
    //        }
    //        return true;
    //    }
    //
    //    @Override
    //    public void previewRequested(PreviewRequest pr) {
    //        throw new UnsupportedOperationException("Not supported yet.");
    //    }
    //    private Result<JmeSpatial> result;
    //
    //    private void registerListener() {
    //        result = Utilities.actionsGlobalContext().lookupResult(JmeSpatial.class);
    //        result.addLookupListener(this);
    //    }
    //
    //    @Override
    //    public void resultChanged(LookupEvent le) {
    ////        Collection<JmeSpatial> items = (Collection<JmeSpatial>) result.allInstances();
    ////        for (JmeSpatial jmeSpatial : items) {
    ////            //Using the JmeSpatials properties you can modify the spatial directly from the AWT thre
    ////            jmeSpatial.getPropertySets()[0].setValue("Local Translation", Vector3f.ZERO);
    ////            return;
    ////        }
    ////
    ////
    ////
    ////        for (JmeSpatial jmeSpatial : items) {
    ////            //the spatial is stored inside the JmeSpatials "Lookup", a general container for Objects
    ////            final Spatial realSpatial = jmeSpatial.getLookup().lookup(Spatial.class);
    ////            //use a Callable to execute on the render thread:
    ////            SceneApplication.getApplication().enqueue(new Callable() {
    ////
    ////                @Override
    ////                public Object call() throws Exception {
    ////                    realSpatial.setLocalTranslation(Vector3f.ZERO);
    ////                    return null;
    ////                }
    ////            });
    ////            return;
    ////        }
    //    }
    //        private static JFileChooser fc = new JFileChooser() {
    //
    //        {
    //            //this.setFileSelectionMode(1);
    //        }
    //    };
    //    public static void addModel(){
    //        try {
    //            fc.showDialog(null, "Load Asset");
    //            FileObject f = FileUtil.toFileObject(fc.getSelectedFile());
    //            MultiFileLoader mc = new BinaryModelFileLoader();
    //            final OgreBinaryMeshDataObject  context = new OgreBinaryMeshDataObject(f,mc);
    //             final ProjectAssetManager manager = context.getLookup().lookup(ProjectAssetManager.class);
    //            if (manager == null) {
    //                return;
    //            }
    //            Runnable call = new Runnable() {
    //
    //                public void run() {
    //                    ProgressHandle progressHandle = ProgressHandleFactory.createHandle("Opening Model");
    //                    progressHandle.start();
    //                    try {
    //                        manager.clearCache();
    //
    //                        final Spatial asset = context.loadAsset();
    //
    //                        if (asset != null) {
    //                            Node node = null;
    //                            if (asset instanceof Node) {
    //                                node = (Node) asset;
    //                            } else {
    //                                node = new Node("RootNode");
    //                                node.attachChild(asset);
    //                            }
    //                            JmeNode jmeNode = NodeUtility.createNode(node);
    //                            SceneApplication app = SceneApplication.getApplication();
    //                            SceneRequest request = new SceneRequest(app, jmeNode, manager);
    //                            request.setWindowTitle("SceneViewer - View Model");
    //                            app.requestScene(request);
    //                        } else {
    //                            Confirmation msg = new NotifyDescriptor.Confirmation(
    //                                    "Error opening " + context.getPrimaryFile().getNameExt(),
    //                                    NotifyDescriptor.OK_CANCEL_OPTION,
    //                                    NotifyDescriptor.ERROR_MESSAGE);
    //                            DialogDisplayer.getDefault().notify(msg);
    //                        }
    //                    }catch(Exception e){
    //                        e.printStackTrace();
    //                    }finally {
    //                        progressHandle.finish();
    //                    }
    //                }
    //            };
    //            new Thread(call).start();
    //        } catch (IOException ex) {
    //            Exceptions.printStackTrace(ex);
    //        }
    //    }
    //
    //    public void OpenModel(SpatialAssetDataObject context){
    //         FileObject root = FileUtil.toFileObject(new File(""));
    //
    //
    //        JarFile l;
    //        //OpenModel openModel = new OpenModel(new SpatialAssetDataObject(null,null));
    //    }
    //
    //    public final com.jme3.scene.Node rootNode = new com.jme3.scene.Node("MyRootNode");
    //
    //    static {
    //        Project proj = null;
    //        for (Project pro : OpenProjects.getDefault().getOpenProjects()) {
    //            if ("ShadowOfIllusions".equalsIgnoreCase(proj.getProjectDirectory().getName())) {
    //                proj = pro;
    //                break;
    //            }
    //        }
    //        if(proj==null){
    //            JOptionPane.showMessageDialog(null, "UNABLE TO LOCATE PROJECT SHADOWOFILLUSIONS");
    //        }
    //        JOptionPane.showMessageDialog(null, proj.getProjectDirectory().getName());
    //
    //        //FileObject root = proj.getProjectDirectory();
    //        //String path = FileUtil.toFile(root).getAbsolutePath();
    //    }
    //
    //    private void registerSceneListener() {
    //        SceneApplication.getApplication().addSceneListener(this);
    //    }
    //
    //    private void requestScene() {
    //        JmeNode jmeNode = NodeUtility.createNode(rootNode);
    //        //SceneRequest request = new SceneRequest(this, jmeNode, assetManager);
    //        //SceneApplication.getApplication().requestScene(request);
    //    }
    //
    //    @Override
    //    public void sceneRequested(SceneRequest request) {
    //        if (request.getRequester() == this) {
    //            //we now own the scene
    //        }
    //    }
    //
    //    @Override
    //    public boolean sceneClose(SceneRequest request) {
    //        if (request.getRequester() == this) {
    //            //if (isNotSaved()) {
    //            //    return false;
    //            // }
    //        }
    //        return true;
    //    }
    //
    //    @Override
    //    public void previewRequested(PreviewRequest pr) {
    //        throw new UnsupportedOperationException("Not supported yet.");
    //    }
    //    private Result<JmeSpatial> result;
    //
    //    private void registerListener() {
    //        result = Utilities.actionsGlobalContext().lookupResult(JmeSpatial.class);
    //        result.addLookupListener(this);
    //    }
    //
    //    @Override
    //    public void resultChanged(LookupEvent le) {
    ////        Collection<JmeSpatial> items = (Collection<JmeSpatial>) result.allInstances();
    ////        for (JmeSpatial jmeSpatial : items) {
    ////            //Using the JmeSpatials properties you can modify the spatial directly from the AWT thre
    ////            jmeSpatial.getPropertySets()[0].setValue("Local Translation", Vector3f.ZERO);
    ////            return;
    ////        }
    ////
    ////
    ////
    ////        for (JmeSpatial jmeSpatial : items) {
    ////            //the spatial is stored inside the JmeSpatials "Lookup", a general container for Objects
    ////            final Spatial realSpatial = jmeSpatial.getLookup().lookup(Spatial.class);
    ////            //use a Callable to execute on the render thread:
    ////            SceneApplication.getApplication().enqueue(new Callable() {
    ////
    ////                @Override
    ////                public Object call() throws Exception {
    ////                    realSpatial.setLocalTranslation(Vector3f.ZERO);
    ////                    return null;
    ////                }
    ////            });
    ////            return;
    ////        }
    //    }
    //        private static JFileChooser fc = new JFileChooser() {
    //
    //        {
    //            //this.setFileSelectionMode(1);
    //        }
    //    };
    //    public static void addModel(){
    //        try {
    //            fc.showDialog(null, "Load Asset");
    //            FileObject f = FileUtil.toFileObject(fc.getSelectedFile());
    //            MultiFileLoader mc = new BinaryModelFileLoader();
    //            final OgreBinaryMeshDataObject  context = new OgreBinaryMeshDataObject(f,mc);
    //             final ProjectAssetManager manager = context.getLookup().lookup(ProjectAssetManager.class);
    //            if (manager == null) {
    //                return;
    //            }
    //            Runnable call = new Runnable() {
    //
    //                public void run() {
    //                    ProgressHandle progressHandle = ProgressHandleFactory.createHandle("Opening Model");
    //                    progressHandle.start();
    //                    try {
    //                        manager.clearCache();
    //
    //                        final Spatial asset = context.loadAsset();
    //
    //                        if (asset != null) {
    //                            Node node = null;
    //                            if (asset instanceof Node) {
    //                                node = (Node) asset;
    //                            } else {
    //                                node = new Node("RootNode");
    //                                node.attachChild(asset);
    //                            }
    //                            JmeNode jmeNode = NodeUtility.createNode(node);
    //                            SceneApplication app = SceneApplication.getApplication();
    //                            SceneRequest request = new SceneRequest(app, jmeNode, manager);
    //                            request.setWindowTitle("SceneViewer - View Model");
    //                            app.requestScene(request);
    //                        } else {
    //                            Confirmation msg = new NotifyDescriptor.Confirmation(
    //                                    "Error opening " + context.getPrimaryFile().getNameExt(),
    //                                    NotifyDescriptor.OK_CANCEL_OPTION,
    //                                    NotifyDescriptor.ERROR_MESSAGE);
    //                            DialogDisplayer.getDefault().notify(msg);
    //                        }
    //                    }catch(Exception e){
    //                        e.printStackTrace();
    //                    }finally {
    //                        progressHandle.finish();
    //                    }
    //                }
    //            };
    //            new Thread(call).start();
    //        } catch (IOException ex) {
    //            Exceptions.printStackTrace(ex);
    //        }
    //    }
    //
    //    public void OpenModel(SpatialAssetDataObject context){
    //         FileObject root = FileUtil.toFileObject(new File(""));
    //
    //
    //        JarFile l;
    //        //OpenModel openModel = new OpenModel(new SpatialAssetDataObject(null,null));
    //    }
    //
//    public final com.jme3.scene.Node rootNode = new com.jme3.scene.Node("MyRootNode");
//
//    static {
//        Project proj = null;
//        for (Project pro : OpenProjects.getDefault().getOpenProjects()) {
//            if ("ShadowOfIllusions".equalsIgnoreCase(proj.getProjectDirectory().getName())) {
//                proj = pro;
//                break;
//            }
//        }
//        if(proj==null){
//            JOptionPane.showMessageDialog(null, "UNABLE TO LOCATE PROJECT SHADOWOFILLUSIONS");
//        }
//        JOptionPane.showMessageDialog(null, proj.getProjectDirectory().getName());
//        
//        //FileObject root = proj.getProjectDirectory(); 
//        //String path = FileUtil.toFile(root).getAbsolutePath(); 
//    }
//
//    private void registerSceneListener() {
//        SceneApplication.getApplication().addSceneListener(this);
//    }
//
//    private void requestScene() {
//        JmeNode jmeNode = NodeUtility.createNode(rootNode);
//        //SceneRequest request = new SceneRequest(this, jmeNode, assetManager);
//        //SceneApplication.getApplication().requestScene(request);
//    }
//
//    @Override
//    public void sceneRequested(SceneRequest request) {
//        if (request.getRequester() == this) {
//            //we now own the scene
//        }
//    }
//
//    @Override
//    public boolean sceneClose(SceneRequest request) {
//        if (request.getRequester() == this) {
//            //if (isNotSaved()) {
//            //    return false;
//            // }
//        }
//        return true;
//    }
//
//    @Override
//    public void previewRequested(PreviewRequest pr) {
//        throw new UnsupportedOperationException("Not supported yet.");
//    }
//    private Result<JmeSpatial> result;
//
//    private void registerListener() {
//        result = Utilities.actionsGlobalContext().lookupResult(JmeSpatial.class);
//        result.addLookupListener(this);
//    }
//
//    @Override
//    public void resultChanged(LookupEvent le) {
////        Collection<JmeSpatial> items = (Collection<JmeSpatial>) result.allInstances();
////        for (JmeSpatial jmeSpatial : items) {
////            //Using the JmeSpatials properties you can modify the spatial directly from the AWT thre
////            jmeSpatial.getPropertySets()[0].setValue("Local Translation", Vector3f.ZERO);
////            return;
////        }
////
////
////
////        for (JmeSpatial jmeSpatial : items) {
////            //the spatial is stored inside the JmeSpatials "Lookup", a general container for Objects
////            final Spatial realSpatial = jmeSpatial.getLookup().lookup(Spatial.class);
////            //use a Callable to execute on the render thread:
////            SceneApplication.getApplication().enqueue(new Callable() {
////
////                @Override
////                public Object call() throws Exception {
////                    realSpatial.setLocalTranslation(Vector3f.ZERO);
////                    return null;
////                }
////            });
////            return;
////        }
//    }
//        private static JFileChooser fc = new JFileChooser() {
//
//        {
//            //this.setFileSelectionMode(1);
//        }
//    };
//    public static void addModel(){
//        try {
//            fc.showDialog(null, "Load Asset");
//            FileObject f = FileUtil.toFileObject(fc.getSelectedFile());
//            MultiFileLoader mc = new BinaryModelFileLoader();
//            final OgreBinaryMeshDataObject  context = new OgreBinaryMeshDataObject(f,mc);
//             final ProjectAssetManager manager = context.getLookup().lookup(ProjectAssetManager.class);
//            if (manager == null) {
//                return;
//            }
//            Runnable call = new Runnable() {
//
//                public void run() {
//                    ProgressHandle progressHandle = ProgressHandleFactory.createHandle("Opening Model");
//                    progressHandle.start();
//                    try {
//                        manager.clearCache();
//
//                        final Spatial asset = context.loadAsset();
// 
//                        if (asset != null) {
//                            Node node = null;
//                            if (asset instanceof Node) {
//                                node = (Node) asset;
//                            } else {
//                                node = new Node("RootNode");
//                                node.attachChild(asset);
//                            }
//                            JmeNode jmeNode = NodeUtility.createNode(node);
//                            SceneApplication app = SceneApplication.getApplication();
//                            SceneRequest request = new SceneRequest(app, jmeNode, manager);
//                            request.setWindowTitle("SceneViewer - View Model");
//                            app.requestScene(request);
//                        } else {
//                            Confirmation msg = new NotifyDescriptor.Confirmation(
//                                    "Error opening " + context.getPrimaryFile().getNameExt(),
//                                    NotifyDescriptor.OK_CANCEL_OPTION,
//                                    NotifyDescriptor.ERROR_MESSAGE);
//                            DialogDisplayer.getDefault().notify(msg);
//                        }
//                    }catch(Exception e){
//                        e.printStackTrace();
//                    }finally {
//                        progressHandle.finish();
//                    }
//                }
//            };
//            new Thread(call).start();
//        } catch (IOException ex) {
//            Exceptions.printStackTrace(ex);
//        }
//    }
//    
//    public void OpenModel(SpatialAssetDataObject context){
//         FileObject root = FileUtil.toFileObject(new File(""));
//        
//        
//        JarFile l;
//        //OpenModel openModel = new OpenModel(new SpatialAssetDataObject(null,null));
//    }
//    