/*
 * To change this template, choose Tools | Templates and open the template in
 * the editor.
 */
package com.spectre.flairdataeditor;

import com.spectre.deck.Card;
import com.spectre.deck.CardStats.*;
import javax.swing.JOptionPane;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.ChangeSupport;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.util.Utilities;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//com.spectre.flairdataeditor//FlairDataEditor//EN",
autostore = false)
@TopComponent.Description(preferredID = "FlairDataEditorTopComponent",
iconBase = "com/spectre/flairdataeditor/icon.png",
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "com.spectre.flairdataeditor.FlairDataEditorTopComponent")
@ActionReference(path = "Menu/Window" /*
 * , position = 333
 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_FlairDataEditorAction",
preferredID = "FlairDataEditorTopComponent")
public final class FlairDataEditorTopComponent extends TopComponent implements LookupListener {

    public enum skillTypes {

        projectile, mine, melee, instant, teamInstant, barrier, shelter, parry, counter;
    }

    public enum skillTypesExtended {
        //defTypeStats

        brush, reflect, antiPierce,
        //instTypeStats
        user, opp, both,
        //attkTypeStats
        pierce, knockback, increaseKnockback;
    }
    private Lookup.Result result = null;
    private Lookup.Result changed = null;
    private ChangeSupport changeSupport;
    private Card card;

    public FlairDataEditorTopComponent() {
        initComponents();

        disableJSpinEditor(getComponents());
        setName(NbBundle.getMessage(FlairDataEditorTopComponent.class, "CTL_FlairDataEditorTopComponent"));
        setToolTipText(NbBundle.getMessage(FlairDataEditorTopComponent.class, "HINT_FlairDataEditorTopComponent"));
    }

    public void disableJSpinEditor(java.awt.Component[] comp) {
        for (java.awt.Component c : comp) {
            if (c instanceof javax.swing.JSpinner) {
                ((javax.swing.JSpinner.DefaultEditor) ((javax.swing.JSpinner) c).getEditor()).getTextField().setEditable(false);
            } else if (c instanceof javax.accessibility.Accessible) {
                if (c instanceof javax.swing.JPanel) {
                    disableJSpinEditor(((javax.swing.JPanel) c).getComponents());
                } else if (c instanceof javax.swing.JTabbedPane) {
                    disableJSpinEditor(((javax.swing.JTabbedPane) c).getComponents());
                }
            }
        }
    }

    public void toggleAttackTypePane(boolean enabled) {
        for (java.awt.Component c : atvPane.getComponents()) {
            c.setEnabled(enabled);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titleText = new javax.swing.JLabel();
        mainTabbedPane = new javax.swing.JTabbedPane();
        attributesPane = new javax.swing.JPanel();
        atvPane = new javax.swing.JPanel();
        attkHomingText = new javax.swing.JLabel();
        attkHoming = new javax.swing.JSpinner();
        attkVelocityText = new javax.swing.JLabel();
        attkVelocity = new javax.swing.JSpinner();
        attkCrawlerText = new javax.swing.JLabel();
        attkCrawler = new javax.swing.JCheckBox();
        attkPathText = new javax.swing.JLabel();
        attkPath = new javax.swing.JComboBox();
        attkDamageText = new javax.swing.JLabel();
        attkDamage = new javax.swing.JComboBox();
        baPane = new javax.swing.JPanel();
        cardNameText = new javax.swing.JLabel();
        cardName = new javax.swing.JTextField();
        cardSeriesText = new javax.swing.JLabel();
        cardTraitText = new javax.swing.JLabel();
        cardTrait = new javax.swing.JComboBox();
        cardRangeText = new javax.swing.JLabel();
        cardRange = new javax.swing.JComboBox();
        maxUseText = new javax.swing.JLabel();
        maxUse = new javax.swing.JSpinner();
        skillTypeText = new javax.swing.JLabel();
        skillType = new javax.swing.JComboBox();
        skillTypeExtendedText = new javax.swing.JLabel();
        skillTypeExtended = new javax.swing.JComboBox();
        cardSeries = new javax.swing.JComboBox();
        ctsPane = new javax.swing.JPanel();
        autoUseText = new javax.swing.JLabel();
        autoUse = new javax.swing.JCheckBox();
        decreasePlayerKnockback = new javax.swing.JCheckBox();
        decreasePlayerKnockbackText = new javax.swing.JLabel();
        shuffleSkillsText = new javax.swing.JLabel();
        shuffleSkills = new javax.swing.JCheckBox();
        skillCostIncreaseText = new javax.swing.JLabel();
        skillCostIncrease = new javax.swing.JCheckBox();
        statusResetText = new javax.swing.JLabel();
        statusReset = new javax.swing.JCheckBox();
        eraseSkillText = new javax.swing.JLabel();
        java.util.ArrayList<String> eraseOptions = new java.util.ArrayList<String>();
        eraseOptions.add("None");
        eraseOptions.add("Same Button");
        eraseOptions.add("Random Skill");
        for(CardSeries c:CardSeries.values()){
            eraseOptions.add(c.toString());
        }
        for(CardTrait c:CardTrait.values()){
            eraseOptions.add(c.toString());
        }
        for(CardRange c:CardRange.values()){
            eraseOptions.add(c.toString());
        }
        String[] eraseOption = eraseOptions.toArray(new String[eraseOptions.size()]);
        eraseSkill = new javax.swing.JComboBox();
        mpCostText = new javax.swing.JLabel();
        mpCost = new javax.swing.JComboBox();
        mpIncreaseText = new javax.swing.JLabel();
        mpIncrease = new javax.swing.JComboBox();
        sdPane = new javax.swing.JScrollPane();
        skillDescription = new javax.swing.JTextArea();
        statsPane = new javax.swing.JPanel();
        explainSubPane = new javax.swing.JPanel();
        opponentText = new javax.swing.JLabel();
        userText = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        hpSubPane = new javax.swing.JPanel();
        hpText = new javax.swing.JLabel();
        hpUserAmount = new javax.swing.JSpinner();
        hpUserDuration = new javax.swing.JSpinner();
        hpUserChanced = new javax.swing.JCheckBox();
        hpOpponentAmount = new javax.swing.JSpinner();
        hpOpponentDuration = new javax.swing.JSpinner();
        hpOpponentChanced = new javax.swing.JCheckBox();
        speedSubPane = new javax.swing.JPanel();
        speedText = new javax.swing.JLabel();
        speedUserAmount = new javax.swing.JSpinner();
        speedUserDuration = new javax.swing.JSpinner();
        speedUserChanced = new javax.swing.JCheckBox();
        speedOpponentAmount = new javax.swing.JSpinner();
        speedOpponentDuration = new javax.swing.JSpinner();
        speedOpponentChanced = new javax.swing.JCheckBox();
        immobolizeSubPane = new javax.swing.JPanel();
        immobolizeText = new javax.swing.JLabel();
        immobolizeUserAmount = new javax.swing.JSpinner();
        immobolizeUserDuration = new javax.swing.JSpinner();
        immobolizeUserChanced = new javax.swing.JCheckBox();
        immobolizeOpponentAmount = new javax.swing.JSpinner();
        immobolizeOpponentDuration = new javax.swing.JSpinner();
        immobolizeOpponentChanced = new javax.swing.JCheckBox();
        paralyzeSubPane = new javax.swing.JPanel();
        paralyzeText = new javax.swing.JLabel();
        paralyzeUserAmount = new javax.swing.JSpinner();
        paralyzeUserDuration = new javax.swing.JSpinner();
        paralyzeUserChanced = new javax.swing.JCheckBox();
        paralyzeOpponentAmount = new javax.swing.JSpinner();
        paralyzeOpponentDuration = new javax.swing.JSpinner();
        paralyzeOpponentChanced = new javax.swing.JCheckBox();
        mpLevelSubPane = new javax.swing.JPanel();
        mpLevelText = new javax.swing.JLabel();
        mpLevelUserAmount = new javax.swing.JSpinner();
        mpLevelUserDuration = new javax.swing.JSpinner();
        mpLevelUserChanced = new javax.swing.JCheckBox();
        mpLevelOpponentAmount = new javax.swing.JSpinner();
        mpLevelOpponentDuration = new javax.swing.JSpinner();
        mpLevelOpponentChanced = new javax.swing.JCheckBox();
        increaseLockOnRangeSubPane = new javax.swing.JPanel();
        increaseLockOnRangeText = new javax.swing.JLabel();
        increaseLockOnRangeUserAmount = new javax.swing.JSpinner();
        increaseLockOnRangeUserDuration = new javax.swing.JSpinner();
        increaseLockOnRangeUserChanced = new javax.swing.JCheckBox();
        increaseLockOnRangeOpponentAmount = new javax.swing.JSpinner();
        increaseLockOnRangeOpponentDuration = new javax.swing.JSpinner();
        increaseLockOnRangeOpponentChanced = new javax.swing.JCheckBox();
        explainSubPane2 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        mpSubPane = new javax.swing.JPanel();
        mpText = new javax.swing.JLabel();
        mpUserAmount = new javax.swing.JSpinner();
        mpUserDuration = new javax.swing.JSpinner();
        mpUserChanced = new javax.swing.JCheckBox();
        mpOpponentAmount = new javax.swing.JSpinner();
        mpOpponentDuration = new javax.swing.JSpinner();
        mpOpponentChanced = new javax.swing.JCheckBox();
        confuseSubPane = new javax.swing.JPanel();
        confuseText = new javax.swing.JLabel();
        confuseUserAmount = new javax.swing.JSpinner();
        confuseUserDuration = new javax.swing.JSpinner();
        confuseUserChanced = new javax.swing.JCheckBox();
        confuseOpponentAmount = new javax.swing.JSpinner();
        confuseOpponentDuration = new javax.swing.JSpinner();
        confuseOpponentChanced = new javax.swing.JCheckBox();
        dashSubPane = new javax.swing.JPanel();
        dashText = new javax.swing.JLabel();
        dashUserAmount = new javax.swing.JSpinner();
        dashUserDuration = new javax.swing.JSpinner();
        dashUserChanced = new javax.swing.JCheckBox();
        dashOpponentAmount = new javax.swing.JSpinner();
        dashOpponentDuration = new javax.swing.JSpinner();
        dashOpponentChanced = new javax.swing.JCheckBox();
        invisibleSubPane = new javax.swing.JPanel();
        invisibleText = new javax.swing.JLabel();
        invisibleUserAmount = new javax.swing.JSpinner();
        invisibleUserDuration = new javax.swing.JSpinner();
        invisibleUserChanced = new javax.swing.JCheckBox();
        invisibleOpponentAmount = new javax.swing.JSpinner();
        invisibleOpponentDuration = new javax.swing.JSpinner();
        invisibleOpponentChanced = new javax.swing.JCheckBox();
        jumpSubPane = new javax.swing.JPanel();
        jumpText = new javax.swing.JLabel();
        jumpUserAmount = new javax.swing.JSpinner();
        jumpUserDuration = new javax.swing.JSpinner();
        jumpUserChanced = new javax.swing.JCheckBox();
        jumpOpponentAmount = new javax.swing.JSpinner();
        jumpOpponentDuration = new javax.swing.JSpinner();
        jumpOpponentChanced = new javax.swing.JCheckBox();
        defenseSubPane = new javax.swing.JPanel();
        defenseText = new javax.swing.JLabel();
        defenseUserAmount = new javax.swing.JSpinner();
        defenseUserDuration = new javax.swing.JSpinner();
        defenseUserChanced = new javax.swing.JCheckBox();
        defenseOpponentAmount = new javax.swing.JSpinner();
        defenseOpponentDuration = new javax.swing.JSpinner();
        defenseOpponentChanced = new javax.swing.JCheckBox();
        dateModified = new javax.swing.JLabel();

        titleText.setFont(new java.awt.Font("Tahoma", 0, 18));
        org.openide.awt.Mnemonics.setLocalizedText(titleText, org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.titleText.text")); // NOI18N

        atvPane.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.atvPane.border.title"))); // NOI18N

        attkHomingText.setFont(new java.awt.Font("Tahoma", 0, 14));
        org.openide.awt.Mnemonics.setLocalizedText(attkHomingText, org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.attkHomingText.text")); // NOI18N
        attkHomingText.setToolTipText(org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.attkHomingText.toolTipText")); // NOI18N

        attkHoming.setModel(new javax.swing.SpinnerNumberModel(3, 1, 5, 1));
        attkHoming.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                attkHomingStateChanged(evt);
            }
        });

        attkVelocityText.setFont(new java.awt.Font("Tahoma", 0, 14));
        org.openide.awt.Mnemonics.setLocalizedText(attkVelocityText, org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.attkVelocityText.text")); // NOI18N
        attkVelocityText.setToolTipText(org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.attkVelocityText.toolTipText")); // NOI18N

        attkVelocity.setModel(new javax.swing.SpinnerNumberModel(3, 1, 5, 1));
        attkVelocity.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                attkVelocityStateChanged(evt);
            }
        });

        attkCrawlerText.setFont(new java.awt.Font("Tahoma", 0, 14));
        org.openide.awt.Mnemonics.setLocalizedText(attkCrawlerText, org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.attkCrawlerText.text")); // NOI18N
        attkCrawlerText.setToolTipText(org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.attkCrawlerText.toolTipText")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(attkCrawler, org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.attkCrawler.text")); // NOI18N
        attkCrawler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attkCrawlerActionPerformed(evt);
            }
        });

        attkPathText.setFont(new java.awt.Font("Tahoma", 0, 14));
        org.openide.awt.Mnemonics.setLocalizedText(attkPathText, org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.attkPathText.text")); // NOI18N
        attkPathText.setToolTipText(org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.attkPathText.toolTipText")); // NOI18N

        attkPath.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Direct", "Arc", "Parabola"}));
        attkPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attkPathActionPerformed(evt);
            }
        });

        attkDamageText.setFont(new java.awt.Font("Tahoma", 0, 14));
        org.openide.awt.Mnemonics.setLocalizedText(attkDamageText, org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.attkDamageText.text")); // NOI18N
        attkDamageText.setToolTipText(org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.attkDamageText.toolTipText")); // NOI18N

        attkDamage.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Stat [Default]", "Length Held", "User MP", "Opponent MP", " " }));
        attkDamage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attkDamageActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout atvPaneLayout = new javax.swing.GroupLayout(atvPane);
        atvPane.setLayout(atvPaneLayout);
        atvPaneLayout.setHorizontalGroup(
            atvPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(atvPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(atvPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(atvPaneLayout.createSequentialGroup()
                        .addComponent(attkPathText)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(attkPath, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(atvPaneLayout.createSequentialGroup()
                        .addComponent(attkCrawlerText)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(attkCrawler))
                    .addGroup(atvPaneLayout.createSequentialGroup()
                        .addComponent(attkVelocityText)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(attkVelocity, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(atvPaneLayout.createSequentialGroup()
                        .addComponent(attkHomingText)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(attkHoming, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(attkDamageText)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(attkDamage, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        atvPaneLayout.setVerticalGroup(
            atvPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(atvPaneLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(atvPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(attkHoming, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(attkHomingText)
                    .addComponent(attkDamage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(attkDamageText))
                .addGap(18, 18, 18)
                .addGroup(atvPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(attkVelocityText)
                    .addComponent(attkVelocity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(atvPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(attkCrawlerText)
                    .addComponent(attkCrawler))
                .addGap(18, 18, 18)
                .addGroup(atvPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(attkPathText)
                    .addComponent(attkPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        attkDamageText.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.attkDamage.AccessibleContext.accessibleName")); // NOI18N

        baPane.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.baPane.border.title"))); // NOI18N

        cardNameText.setFont(new java.awt.Font("Tahoma", 0, 14));
        org.openide.awt.Mnemonics.setLocalizedText(cardNameText, org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.cardNameText.text")); // NOI18N

        cardName.setEditable(false);
        cardName.setText(org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.cardName.text")); // NOI18N
        cardName.setToolTipText(org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.cardName.toolTipText")); // NOI18N

        cardSeriesText.setFont(new java.awt.Font("Tahoma", 0, 14));
        org.openide.awt.Mnemonics.setLocalizedText(cardSeriesText, org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.cardSeriesText.text")); // NOI18N

        cardTraitText.setFont(new java.awt.Font("Tahoma", 0, 14));
        org.openide.awt.Mnemonics.setLocalizedText(cardTraitText, org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.cardTraitText.text")); // NOI18N

        cardTrait.setModel(new javax.swing.DefaultComboBoxModel(CardTrait.values()));
        cardTrait.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cardTraitActionPerformed(evt);
            }
        });

        cardRangeText.setFont(new java.awt.Font("Tahoma", 0, 14));
        org.openide.awt.Mnemonics.setLocalizedText(cardRangeText, org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.cardRangeText.text")); // NOI18N

        cardRange.setModel(new javax.swing.DefaultComboBoxModel(CardRange.values()));
        cardRange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cardRangeActionPerformed(evt);
            }
        });

        maxUseText.setFont(new java.awt.Font("Tahoma", 0, 14));
        org.openide.awt.Mnemonics.setLocalizedText(maxUseText, org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.maxUseText.text")); // NOI18N
        maxUseText.setToolTipText(org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.maxUseText.toolTipText")); // NOI18N

        maxUse.setModel(new javax.swing.SpinnerListModel(new String[] {"U", "1", "2", "3"}));
        maxUse.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                maxUseStateChanged(evt);
            }
        });

        skillTypeText.setFont(new java.awt.Font("Tahoma", 0, 14));
        org.openide.awt.Mnemonics.setLocalizedText(skillTypeText, org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.skillTypeText.text")); // NOI18N
        skillTypeText.setToolTipText(org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.skillTypeText.toolTipText")); // NOI18N

        skillType.setModel(new javax.swing.DefaultComboBoxModel(skillTypes.values()));
        skillType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                skillTypeActionPerformed(evt);
            }
        });

        skillTypeExtendedText.setFont(new java.awt.Font("Tahoma", 0, 14));
        org.openide.awt.Mnemonics.setLocalizedText(skillTypeExtendedText, org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.skillTypeExtendedText.text")); // NOI18N
        skillTypeExtendedText.setToolTipText(org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.skillTypeExtendedText.toolTipText")); // NOI18N

        skillTypeExtended.setModel(new javax.swing.DefaultComboBoxModel());
        skillTypeExtended.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                skillTypeExtendedActionPerformed(evt);
            }
        });

        cardSeries.setModel(new javax.swing.DefaultComboBoxModel(CardSeries.values()));
        cardSeries.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cardSeriesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout baPaneLayout = new javax.swing.GroupLayout(baPane);
        baPane.setLayout(baPaneLayout);
        baPaneLayout.setHorizontalGroup(
            baPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, baPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cardNameText)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cardName, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cardSeriesText)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cardSeries, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cardTraitText)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cardTrait, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cardRangeText)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cardRange, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(146, 146, 146))
            .addGroup(baPaneLayout.createSequentialGroup()
                .addGap(66, 66, 66)
                .addComponent(maxUseText)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(maxUse, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49)
                .addComponent(skillTypeText)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(skillType, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46)
                .addComponent(skillTypeExtendedText)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(skillTypeExtended, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(232, Short.MAX_VALUE))
        );
        baPaneLayout.setVerticalGroup(
            baPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, baPaneLayout.createSequentialGroup()
                .addContainerGap(19, Short.MAX_VALUE)
                .addGroup(baPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cardNameText, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cardName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cardSeriesText)
                    .addComponent(cardTraitText)
                    .addComponent(cardTrait, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cardRangeText)
                    .addComponent(cardRange, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cardSeries, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(baPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(skillTypeExtendedText)
                    .addComponent(skillTypeExtended, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(skillTypeText)
                    .addComponent(skillType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(maxUse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(maxUseText))
                .addContainerGap())
        );

        ctsPane.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.ctsPane.border.title"))); // NOI18N

        autoUseText.setFont(new java.awt.Font("Tahoma", 0, 14));
        org.openide.awt.Mnemonics.setLocalizedText(autoUseText, org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.autoUseText.text")); // NOI18N
        autoUseText.setToolTipText(org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.autoUseText.toolTipText")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(autoUse, org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.autoUse.text")); // NOI18N
        autoUse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoUseActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(decreasePlayerKnockback, org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.decreasePlayerKnockback.text")); // NOI18N
        decreasePlayerKnockback.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decreasePlayerKnockbackActionPerformed(evt);
            }
        });

        decreasePlayerKnockbackText.setFont(new java.awt.Font("Tahoma", 0, 14));
        org.openide.awt.Mnemonics.setLocalizedText(decreasePlayerKnockbackText, org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.decreasePlayerKnockbackText.text")); // NOI18N
        decreasePlayerKnockbackText.setToolTipText(org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.decreasePlayerKnockbackText.toolTipText")); // NOI18N

        shuffleSkillsText.setFont(new java.awt.Font("Tahoma", 0, 14));
        org.openide.awt.Mnemonics.setLocalizedText(shuffleSkillsText, org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.shuffleSkillsText.text")); // NOI18N
        shuffleSkillsText.setToolTipText(org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.shuffleSkillsText.toolTipText")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(shuffleSkills, org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.shuffleSkills.text")); // NOI18N
        shuffleSkills.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shuffleSkillsActionPerformed(evt);
            }
        });

        skillCostIncreaseText.setFont(new java.awt.Font("Tahoma", 0, 14));
        org.openide.awt.Mnemonics.setLocalizedText(skillCostIncreaseText, org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.skillCostIncreaseText.text")); // NOI18N
        skillCostIncreaseText.setToolTipText(org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.skillCostIncreaseText.toolTipText")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(skillCostIncrease, org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.skillCostIncrease.text")); // NOI18N
        skillCostIncrease.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                skillCostIncreaseActionPerformed(evt);
            }
        });

        statusResetText.setFont(new java.awt.Font("Tahoma", 0, 14));
        org.openide.awt.Mnemonics.setLocalizedText(statusResetText, org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.statusResetText.text")); // NOI18N
        statusResetText.setToolTipText(org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.statusResetText.toolTipText")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(statusReset, org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.statusReset.text")); // NOI18N
        statusReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statusResetActionPerformed(evt);
            }
        });

        eraseSkillText.setFont(new java.awt.Font("Tahoma", 0, 14));
        org.openide.awt.Mnemonics.setLocalizedText(eraseSkillText, org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.eraseSkillText.text")); // NOI18N
        eraseSkillText.setToolTipText(org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.eraseSkillText.toolTipText")); // NOI18N

        eraseSkill.setModel(new javax.swing.DefaultComboBoxModel(eraseOption));
        eraseSkill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eraseSkillActionPerformed(evt);
            }
        });

        mpCostText.setFont(new java.awt.Font("Tahoma", 0, 14));
        org.openide.awt.Mnemonics.setLocalizedText(mpCostText, org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.mpCostText.text")); // NOI18N
        mpCostText.setToolTipText(org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.mpCostText.toolTipText")); // NOI18N

        mpCost.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Stat [Default]", "25% User MP", "50% User MP", "75% User MP", "100% User MP" }));
        mpCost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mpCostActionPerformed(evt);
            }
        });

        mpIncreaseText.setFont(new java.awt.Font("Tahoma", 0, 14));
        org.openide.awt.Mnemonics.setLocalizedText(mpIncreaseText, org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.mpIncreaseText.text")); // NOI18N
        mpIncreaseText.setToolTipText(org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.mpIncreaseText.toolTipText")); // NOI18N

        mpIncrease.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Stat [Default]", "Damage Dealt", "25% Opponent MP", "50% Opponent MP", "75% Opponent MP", "100% Opponent MP" }));
        mpIncrease.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mpIncreaseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ctsPaneLayout = new javax.swing.GroupLayout(ctsPane);
        ctsPane.setLayout(ctsPaneLayout);
        ctsPaneLayout.setHorizontalGroup(
            ctsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ctsPaneLayout.createSequentialGroup()
                .addGroup(ctsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ctsPaneLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(ctsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(autoUseText)
                            .addComponent(shuffleSkillsText)
                            .addComponent(decreasePlayerKnockbackText))
                        .addGap(18, 18, 18)
                        .addGroup(ctsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(decreasePlayerKnockback)
                            .addComponent(autoUse)
                            .addComponent(shuffleSkills)))
                    .addGroup(ctsPaneLayout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addComponent(mpCostText)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(mpCost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(62, 62, 62)
                .addGroup(ctsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ctsPaneLayout.createSequentialGroup()
                        .addComponent(mpIncreaseText)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(mpIncrease, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(ctsPaneLayout.createSequentialGroup()
                        .addGroup(ctsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(ctsPaneLayout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addComponent(statusResetText))
                            .addComponent(skillCostIncreaseText))
                        .addGap(18, 18, 18)
                        .addGroup(ctsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(skillCostIncrease)
                            .addComponent(statusReset)))
                    .addGroup(ctsPaneLayout.createSequentialGroup()
                        .addComponent(eraseSkillText)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(eraseSkill, 0, 144, Short.MAX_VALUE)))
                .addContainerGap())
        );
        ctsPaneLayout.setVerticalGroup(
            ctsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ctsPaneLayout.createSequentialGroup()
                .addGroup(ctsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ctsPaneLayout.createSequentialGroup()
                        .addGroup(ctsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(autoUseText)
                            .addComponent(autoUse))
                        .addGap(18, 18, 18)
                        .addGroup(ctsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(decreasePlayerKnockback)
                            .addComponent(decreasePlayerKnockbackText))
                        .addGap(18, 18, 18)
                        .addGroup(ctsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(shuffleSkillsText)
                            .addComponent(shuffleSkills)))
                    .addGroup(ctsPaneLayout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(ctsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(skillCostIncreaseText)
                            .addComponent(skillCostIncrease))
                        .addGap(16, 16, 16)
                        .addGroup(ctsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(statusResetText)
                            .addComponent(statusReset))
                        .addGap(22, 22, 22)
                        .addGroup(ctsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(eraseSkill, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(eraseSkillText))))
                .addGroup(ctsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ctsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(mpCost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(mpCostText))
                    .addGroup(ctsPaneLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(ctsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(mpIncrease, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(mpIncreaseText))))
                .addContainerGap())
        );

        sdPane.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.sdPane.border.title"))); // NOI18N

        skillDescription.setColumns(20);
        skillDescription.setLineWrap(true);
        skillDescription.setRows(2);
        skillDescription.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                skillDescriptionKeyTyped(evt);
            }
        });
        sdPane.setViewportView(skillDescription);

        javax.swing.GroupLayout attributesPaneLayout = new javax.swing.GroupLayout(attributesPane);
        attributesPane.setLayout(attributesPaneLayout);
        attributesPaneLayout.setHorizontalGroup(
            attributesPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(attributesPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(attributesPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, attributesPaneLayout.createSequentialGroup()
                        .addComponent(atvPane, javax.swing.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(ctsPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(sdPane, javax.swing.GroupLayout.DEFAULT_SIZE, 844, Short.MAX_VALUE)
                    .addComponent(baPane, 0, 844, Short.MAX_VALUE))
                .addContainerGap())
        );
        attributesPaneLayout.setVerticalGroup(
            attributesPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(attributesPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(baPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(attributesPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(ctsPane, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(atvPane, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sdPane)
                .addContainerGap())
        );

        mainTabbedPane.addTab(org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.attributesPane.TabConstraints.tabTitle"), attributesPane); // NOI18N

        statsPane.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.statsPane.border.title"))); // NOI18N

        opponentText.setFont(new java.awt.Font("Tahoma", 0, 14));
        org.openide.awt.Mnemonics.setLocalizedText(opponentText, org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.opponentText.text")); // NOI18N

        userText.setFont(new java.awt.Font("Tahoma", 0, 14));
        org.openide.awt.Mnemonics.setLocalizedText(userText, org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.userText.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.jLabel3.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel7, org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.jLabel7.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.jLabel2.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel5, org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.jLabel5.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel6, org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.jLabel6.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.jLabel1.text")); // NOI18N

        javax.swing.GroupLayout explainSubPaneLayout = new javax.swing.GroupLayout(explainSubPane);
        explainSubPane.setLayout(explainSubPaneLayout);
        explainSubPaneLayout.setHorizontalGroup(
            explainSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(explainSubPaneLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(explainSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(explainSubPaneLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7))
                    .addGroup(explainSubPaneLayout.createSequentialGroup()
                        .addComponent(userText)
                        .addGap(119, 119, 119)
                        .addComponent(opponentText)
                        .addGap(34, 34, 34)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        explainSubPaneLayout.setVerticalGroup(
            explainSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(explainSubPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(explainSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(userText)
                    .addComponent(opponentText))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(explainSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        hpText.setFont(new java.awt.Font("Tahoma", 0, 14));
        org.openide.awt.Mnemonics.setLocalizedText(hpText, org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.hpText.text")); // NOI18N
        hpText.setToolTipText(org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.hpText.toolTipText")); // NOI18N

        hpUserAmount.setModel(new javax.swing.SpinnerNumberModel(0, 0, 14, 1));
        hpUserAmount.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                hpUser(evt);
            }
        });

        hpUserDuration.setModel(new javax.swing.SpinnerNumberModel(0, 0, 60, 1));
        hpUserDuration.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                hpUser(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(hpUserChanced, org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.hpUserChanced.text")); // NOI18N
        hpUserChanced.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                hpUser(evt);
            }
        });

        hpOpponentAmount.setModel(new javax.swing.SpinnerNumberModel(0, 0, 14, 1));
        hpOpponentAmount.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                hpOpponent(evt);
            }
        });

        hpOpponentDuration.setModel(new javax.swing.SpinnerNumberModel(0, 0, 60, 1));
        hpOpponentDuration.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                hpOpponent(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(hpOpponentChanced, org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.hpOpponentChanced.text")); // NOI18N
        hpOpponentChanced.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                hpOpponent(evt);
            }
        });

        javax.swing.GroupLayout hpSubPaneLayout = new javax.swing.GroupLayout(hpSubPane);
        hpSubPane.setLayout(hpSubPaneLayout);
        hpSubPaneLayout.setHorizontalGroup(
            hpSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, hpSubPaneLayout.createSequentialGroup()
                .addComponent(hpText)
                .addGap(18, 18, 18)
                .addComponent(hpUserChanced)
                .addGap(4, 4, 4)
                .addComponent(hpUserAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(hpUserDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(hpOpponentChanced)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(hpOpponentAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(hpOpponentDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        hpSubPaneLayout.setVerticalGroup(
            hpSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(hpSubPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(hpSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(hpSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(hpSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(hpSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(hpOpponentAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(hpOpponentDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(hpOpponentChanced))
                        .addGroup(hpSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(hpUserAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(hpUserDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(hpUserChanced))
                    .addComponent(hpText))
                .addContainerGap())
        );

        speedText.setFont(new java.awt.Font("Tahoma", 0, 14));
        org.openide.awt.Mnemonics.setLocalizedText(speedText, org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.speedText.text")); // NOI18N
        speedText.setToolTipText(org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.speedText.toolTipText")); // NOI18N

        speedUserAmount.setModel(new javax.swing.SpinnerNumberModel(0, 0, 3, 1));
        speedUserAmount.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                speedUser(evt);
            }
        });

        speedUserDuration.setModel(new javax.swing.SpinnerNumberModel(0, 0, 60, 1));
        speedUserDuration.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                speedUser(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(speedUserChanced, org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.speedUserChanced.text")); // NOI18N
        speedUserChanced.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                speedUser(evt);
            }
        });

        speedOpponentAmount.setModel(new javax.swing.SpinnerNumberModel(0, 0, 3, 1));
        speedOpponentAmount.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                speedOpponent(evt);
            }
        });

        speedOpponentDuration.setModel(new javax.swing.SpinnerNumberModel(0, 0, 60, 1));
        speedOpponentDuration.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                speedOpponent(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(speedOpponentChanced, org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.speedOpponentChanced.text")); // NOI18N
        speedOpponentChanced.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                speedOpponent(evt);
            }
        });

        javax.swing.GroupLayout speedSubPaneLayout = new javax.swing.GroupLayout(speedSubPane);
        speedSubPane.setLayout(speedSubPaneLayout);
        speedSubPaneLayout.setHorizontalGroup(
            speedSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, speedSubPaneLayout.createSequentialGroup()
                .addComponent(speedText)
                .addGap(18, 18, 18)
                .addComponent(speedUserChanced)
                .addGap(4, 4, 4)
                .addComponent(speedUserAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(speedUserDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(speedOpponentChanced)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(speedOpponentAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(speedOpponentDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(11, Short.MAX_VALUE))
        );
        speedSubPaneLayout.setVerticalGroup(
            speedSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(speedSubPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(speedSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(speedSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(speedSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(speedSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(speedOpponentAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(speedOpponentDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(speedOpponentChanced))
                        .addGroup(speedSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(speedUserAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(speedUserDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(speedUserChanced))
                    .addComponent(speedText))
                .addContainerGap())
        );

        immobolizeText.setFont(new java.awt.Font("Tahoma", 0, 14));
        org.openide.awt.Mnemonics.setLocalizedText(immobolizeText, org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.immobolizeText.text")); // NOI18N
        immobolizeText.setToolTipText(org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.immobolizeText.toolTipText")); // NOI18N

        immobolizeUserAmount.setModel(new javax.swing.SpinnerNumberModel(0, 0, 14, 1));
        immobolizeUserAmount.setEnabled(false);
        immobolizeUserAmount.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                immobolizeUser(evt);
            }
        });

        immobolizeUserDuration.setModel(new javax.swing.SpinnerNumberModel(0, 0, 60, 1));
        immobolizeUserDuration.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                immobolizeUser(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(immobolizeUserChanced, org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.immobolizeUserChanced.text")); // NOI18N
        immobolizeUserChanced.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                immobolizeUser(evt);
            }
        });

        immobolizeOpponentAmount.setModel(new javax.swing.SpinnerNumberModel(0, 0, 14, 1));
        immobolizeOpponentAmount.setEnabled(false);
        immobolizeOpponentAmount.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                immobolizeOpponent(evt);
            }
        });

        immobolizeOpponentDuration.setModel(new javax.swing.SpinnerNumberModel(0, 0, 60, 1));
        immobolizeOpponentDuration.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                immobolizeOpponent(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(immobolizeOpponentChanced, org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.immobolizeOpponentChanced.text")); // NOI18N
        immobolizeOpponentChanced.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                immobolizeOpponent(evt);
            }
        });

        javax.swing.GroupLayout immobolizeSubPaneLayout = new javax.swing.GroupLayout(immobolizeSubPane);
        immobolizeSubPane.setLayout(immobolizeSubPaneLayout);
        immobolizeSubPaneLayout.setHorizontalGroup(
            immobolizeSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, immobolizeSubPaneLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(immobolizeText)
                .addGap(18, 18, 18)
                .addComponent(immobolizeUserChanced)
                .addGap(4, 4, 4)
                .addComponent(immobolizeUserAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(immobolizeUserDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(immobolizeOpponentChanced)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(immobolizeOpponentAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(immobolizeOpponentDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(65, 65, 65))
        );
        immobolizeSubPaneLayout.setVerticalGroup(
            immobolizeSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(immobolizeSubPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(immobolizeSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(immobolizeSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(immobolizeSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(immobolizeSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(immobolizeOpponentAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(immobolizeOpponentDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(immobolizeOpponentChanced))
                        .addGroup(immobolizeSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(immobolizeUserAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(immobolizeUserDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(immobolizeUserChanced))
                    .addComponent(immobolizeText))
                .addContainerGap())
        );

        paralyzeText.setFont(new java.awt.Font("Tahoma", 0, 14));
        org.openide.awt.Mnemonics.setLocalizedText(paralyzeText, org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.paralyzeText.text")); // NOI18N
        paralyzeText.setToolTipText(org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.paralyzeText.toolTipText")); // NOI18N

        paralyzeUserAmount.setModel(new javax.swing.SpinnerNumberModel(0, 0, 14, 1));
        paralyzeUserAmount.setEnabled(false);
        paralyzeUserAmount.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                paralyzeUser(evt);
            }
        });

        paralyzeUserDuration.setModel(new javax.swing.SpinnerNumberModel(0, 0, 60, 1));
        paralyzeUserDuration.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                paralyzeUser(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(paralyzeUserChanced, org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.paralyzeUserChanced.text")); // NOI18N
        paralyzeUserChanced.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                paralyzeUser(evt);
            }
        });

        paralyzeOpponentAmount.setModel(new javax.swing.SpinnerNumberModel(0, 0, 14, 1));
        paralyzeOpponentAmount.setEnabled(false);
        paralyzeOpponentAmount.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                paralyzeOpponent(evt);
            }
        });

        paralyzeOpponentDuration.setModel(new javax.swing.SpinnerNumberModel(0, 0, 60, 1));
        paralyzeOpponentDuration.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                paralyzeOpponent(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(paralyzeOpponentChanced, org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.paralyzeOpponentChanced.text")); // NOI18N
        paralyzeOpponentChanced.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                paralyzeOpponent(evt);
            }
        });

        javax.swing.GroupLayout paralyzeSubPaneLayout = new javax.swing.GroupLayout(paralyzeSubPane);
        paralyzeSubPane.setLayout(paralyzeSubPaneLayout);
        paralyzeSubPaneLayout.setHorizontalGroup(
            paralyzeSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, paralyzeSubPaneLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(paralyzeText)
                .addGap(18, 18, 18)
                .addComponent(paralyzeUserChanced)
                .addGap(4, 4, 4)
                .addComponent(paralyzeUserAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(paralyzeUserDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(paralyzeOpponentChanced)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(paralyzeOpponentAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(paralyzeOpponentDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(65, 65, 65))
        );
        paralyzeSubPaneLayout.setVerticalGroup(
            paralyzeSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paralyzeSubPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(paralyzeSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(paralyzeSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(paralyzeSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(paralyzeSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(paralyzeOpponentAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(paralyzeOpponentDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(paralyzeOpponentChanced))
                        .addGroup(paralyzeSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(paralyzeUserAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(paralyzeUserDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(paralyzeUserChanced))
                    .addComponent(paralyzeText))
                .addContainerGap())
        );

        mpLevelText.setFont(new java.awt.Font("Tahoma", 0, 14));
        org.openide.awt.Mnemonics.setLocalizedText(mpLevelText, org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.mpLevelText.text")); // NOI18N
        mpLevelText.setToolTipText(org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.mpLevelText.toolTipText")); // NOI18N

        mpLevelUserAmount.setModel(new javax.swing.SpinnerNumberModel(0, 0, 10, 1));
        mpLevelUserAmount.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                mpLevelUser(evt);
            }
        });

        mpLevelUserDuration.setModel(new javax.swing.SpinnerNumberModel(0, 0, 60, 1));
        mpLevelUserDuration.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                mpLevelUser(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(mpLevelUserChanced, org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.mpLevelUserChanced.text")); // NOI18N
        mpLevelUserChanced.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                mpLevelUser(evt);
            }
        });

        mpLevelOpponentAmount.setModel(new javax.swing.SpinnerNumberModel(0, 0, 10, 1));
        mpLevelOpponentAmount.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                mpLevelOpponent(evt);
            }
        });

        mpLevelOpponentDuration.setModel(new javax.swing.SpinnerNumberModel(0, 0, 60, 1));
        mpLevelOpponentDuration.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                mpLevelOpponent(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(mpLevelOpponentChanced, org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.mpLevelOpponentChanced.text")); // NOI18N
        mpLevelOpponentChanced.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                mpLevelOpponent(evt);
            }
        });

        javax.swing.GroupLayout mpLevelSubPaneLayout = new javax.swing.GroupLayout(mpLevelSubPane);
        mpLevelSubPane.setLayout(mpLevelSubPaneLayout);
        mpLevelSubPaneLayout.setHorizontalGroup(
            mpLevelSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mpLevelSubPaneLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(mpLevelText)
                .addGap(18, 18, 18)
                .addComponent(mpLevelUserChanced)
                .addGap(4, 4, 4)
                .addComponent(mpLevelUserAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mpLevelUserDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(mpLevelOpponentChanced)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(mpLevelOpponentAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mpLevelOpponentDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(65, 65, 65))
        );
        mpLevelSubPaneLayout.setVerticalGroup(
            mpLevelSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mpLevelSubPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mpLevelSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mpLevelSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(mpLevelSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(mpLevelSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(mpLevelOpponentAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(mpLevelOpponentDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(mpLevelOpponentChanced))
                        .addGroup(mpLevelSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(mpLevelUserAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(mpLevelUserDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(mpLevelUserChanced))
                    .addComponent(mpLevelText))
                .addContainerGap())
        );

        increaseLockOnRangeText.setFont(new java.awt.Font("Tahoma", 0, 14));
        org.openide.awt.Mnemonics.setLocalizedText(increaseLockOnRangeText, org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.increaseLockOnRangeText.text")); // NOI18N
        increaseLockOnRangeText.setToolTipText(org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.increaseLockOnRangeText.toolTipText")); // NOI18N

        increaseLockOnRangeUserAmount.setModel(new javax.swing.SpinnerNumberModel(0, 0, 5, 1));
        increaseLockOnRangeUserAmount.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                increaseLockOnRangeUser(evt);
            }
        });

        increaseLockOnRangeUserDuration.setModel(new javax.swing.SpinnerNumberModel(0, 0, 60, 1));
        increaseLockOnRangeUserDuration.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                increaseLockOnRangeUser(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(increaseLockOnRangeUserChanced, org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.increaseLockOnRangeUserChanced.text")); // NOI18N
        increaseLockOnRangeUserChanced.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                increaseLockOnRangeUser(evt);
            }
        });

        increaseLockOnRangeOpponentAmount.setModel(new javax.swing.SpinnerNumberModel(0, 0, 5, 1));
        increaseLockOnRangeOpponentAmount.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                increaseLockOnRangeOpponent(evt);
            }
        });

        increaseLockOnRangeOpponentDuration.setModel(new javax.swing.SpinnerNumberModel(0, 0, 60, 1));
        increaseLockOnRangeOpponentDuration.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                increaseLockOnRangeOpponent(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(increaseLockOnRangeOpponentChanced, org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.increaseLockOnRangeOpponentChanced.text")); // NOI18N
        increaseLockOnRangeOpponentChanced.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                increaseLockOnRangeOpponent(evt);
            }
        });

        javax.swing.GroupLayout increaseLockOnRangeSubPaneLayout = new javax.swing.GroupLayout(increaseLockOnRangeSubPane);
        increaseLockOnRangeSubPane.setLayout(increaseLockOnRangeSubPaneLayout);
        increaseLockOnRangeSubPaneLayout.setHorizontalGroup(
            increaseLockOnRangeSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, increaseLockOnRangeSubPaneLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(increaseLockOnRangeText)
                .addGap(18, 18, 18)
                .addComponent(increaseLockOnRangeUserChanced)
                .addGap(4, 4, 4)
                .addComponent(increaseLockOnRangeUserAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(increaseLockOnRangeUserDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(increaseLockOnRangeOpponentChanced)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(increaseLockOnRangeOpponentAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(increaseLockOnRangeOpponentDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(65, 65, 65))
        );
        increaseLockOnRangeSubPaneLayout.setVerticalGroup(
            increaseLockOnRangeSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(increaseLockOnRangeSubPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(increaseLockOnRangeSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(increaseLockOnRangeSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(increaseLockOnRangeSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(increaseLockOnRangeSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(increaseLockOnRangeOpponentAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(increaseLockOnRangeOpponentDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(increaseLockOnRangeOpponentChanced))
                        .addGroup(increaseLockOnRangeSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(increaseLockOnRangeUserAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(increaseLockOnRangeUserDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(increaseLockOnRangeUserChanced))
                    .addComponent(increaseLockOnRangeText))
                .addContainerGap())
        );

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 14));
        org.openide.awt.Mnemonics.setLocalizedText(jLabel9, org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.jLabel9.text")); // NOI18N

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 14));
        org.openide.awt.Mnemonics.setLocalizedText(jLabel10, org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.jLabel10.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel11, org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.jLabel11.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel12, org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.jLabel12.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel13, org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.jLabel13.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel14, org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.jLabel14.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel15, org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.jLabel15.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel16, org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.jLabel16.text")); // NOI18N

        javax.swing.GroupLayout explainSubPane2Layout = new javax.swing.GroupLayout(explainSubPane2);
        explainSubPane2.setLayout(explainSubPane2Layout);
        explainSubPane2Layout.setHorizontalGroup(
            explainSubPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(explainSubPane2Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(explainSubPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(explainSubPane2Layout.createSequentialGroup()
                        .addComponent(jLabel16)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel11)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel12))
                    .addGroup(explainSubPane2Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addGap(119, 119, 119)
                        .addComponent(jLabel9)
                        .addGap(34, 34, 34)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        explainSubPane2Layout.setVerticalGroup(
            explainSubPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(explainSubPane2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(explainSubPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(explainSubPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(jLabel13)
                    .addComponent(jLabel11)
                    .addComponent(jLabel14)
                    .addComponent(jLabel15)
                    .addComponent(jLabel12))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        mpText.setFont(new java.awt.Font("Tahoma", 0, 14));
        org.openide.awt.Mnemonics.setLocalizedText(mpText, org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.mpText.text")); // NOI18N
        mpText.setToolTipText(org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.mpText.toolTipText")); // NOI18N

        mpUserAmount.setModel(new javax.swing.SpinnerNumberModel(0, 0, 14, 1));
        mpUserAmount.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                mpUser(evt);
            }
        });

        mpUserDuration.setModel(new javax.swing.SpinnerNumberModel(0, 0, 60, 1));
        mpUserDuration.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                mpUser(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(mpUserChanced, org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.mpUserChanced.text")); // NOI18N
        mpUserChanced.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                mpUser(evt);
            }
        });

        mpOpponentAmount.setModel(new javax.swing.SpinnerNumberModel(0, 0, 14, 1));
        mpOpponentAmount.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                mpOpponent(evt);
            }
        });

        mpOpponentDuration.setModel(new javax.swing.SpinnerNumberModel(0, 0, 60, 1));
        mpOpponentDuration.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                mpOpponent(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(mpOpponentChanced, org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.mpOpponentChanced.text")); // NOI18N
        mpOpponentChanced.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                mpOpponent(evt);
            }
        });

        javax.swing.GroupLayout mpSubPaneLayout = new javax.swing.GroupLayout(mpSubPane);
        mpSubPane.setLayout(mpSubPaneLayout);
        mpSubPaneLayout.setHorizontalGroup(
            mpSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mpSubPaneLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(mpText)
                .addGap(18, 18, 18)
                .addComponent(mpUserChanced)
                .addGap(4, 4, 4)
                .addComponent(mpUserAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mpUserDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(mpOpponentChanced)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(mpOpponentAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mpOpponentDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(65, 65, 65))
        );
        mpSubPaneLayout.setVerticalGroup(
            mpSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mpSubPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mpSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mpSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(mpSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(mpSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(mpOpponentAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(mpOpponentDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(mpOpponentChanced))
                        .addGroup(mpSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(mpUserAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(mpUserDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(mpUserChanced))
                    .addComponent(mpText))
                .addContainerGap())
        );

        confuseText.setFont(new java.awt.Font("Tahoma", 0, 14));
        org.openide.awt.Mnemonics.setLocalizedText(confuseText, org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.confuseText.text")); // NOI18N
        confuseText.setToolTipText(org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.confuseText.toolTipText")); // NOI18N

        confuseUserAmount.setModel(new javax.swing.SpinnerNumberModel(0, 0, 14, 1));
        confuseUserAmount.setEnabled(false);
        confuseUserAmount.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                confuseUser(evt);
            }
        });

        confuseUserDuration.setModel(new javax.swing.SpinnerNumberModel(0, 0, 60, 1));
        confuseUserDuration.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                confuseUser(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(confuseUserChanced, org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.confuseUserChanced.text")); // NOI18N
        confuseUserChanced.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                confuseUser(evt);
            }
        });

        confuseOpponentAmount.setModel(new javax.swing.SpinnerNumberModel(0, 0, 14, 1));
        confuseOpponentAmount.setEnabled(false);
        confuseOpponentAmount.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                confuseOpponent(evt);
            }
        });

        confuseOpponentDuration.setModel(new javax.swing.SpinnerNumberModel(0, 0, 60, 1));
        confuseOpponentDuration.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                confuseOpponent(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(confuseOpponentChanced, org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.confuseOpponentChanced.text")); // NOI18N
        confuseOpponentChanced.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                confuseOpponent(evt);
            }
        });

        javax.swing.GroupLayout confuseSubPaneLayout = new javax.swing.GroupLayout(confuseSubPane);
        confuseSubPane.setLayout(confuseSubPaneLayout);
        confuseSubPaneLayout.setHorizontalGroup(
            confuseSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, confuseSubPaneLayout.createSequentialGroup()
                .addComponent(confuseText)
                .addGap(18, 18, 18)
                .addComponent(confuseUserChanced)
                .addGap(4, 4, 4)
                .addComponent(confuseUserAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(confuseUserDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(confuseOpponentChanced)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(confuseOpponentAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(confuseOpponentDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        confuseSubPaneLayout.setVerticalGroup(
            confuseSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(confuseSubPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(confuseSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(confuseSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(confuseSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(confuseSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(confuseOpponentAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(confuseOpponentDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(confuseOpponentChanced))
                        .addGroup(confuseSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(confuseUserAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(confuseUserDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(confuseUserChanced))
                    .addComponent(confuseText))
                .addContainerGap())
        );

        dashText.setFont(new java.awt.Font("Tahoma", 0, 14));
        org.openide.awt.Mnemonics.setLocalizedText(dashText, org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.dashText.text")); // NOI18N
        dashText.setToolTipText(org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.dashText.toolTipText")); // NOI18N

        dashUserAmount.setModel(new javax.swing.SpinnerNumberModel(0, 0, 10, 1));
        dashUserAmount.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                dashUser(evt);
            }
        });

        dashUserDuration.setModel(new javax.swing.SpinnerNumberModel(0, 0, 60, 1));
        dashUserDuration.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                dashUser(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(dashUserChanced, org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.dashUserChanced.text")); // NOI18N
        dashUserChanced.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                dashUser(evt);
            }
        });

        dashOpponentAmount.setModel(new javax.swing.SpinnerNumberModel(0, 0, 10, 1));
        dashOpponentAmount.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                dashOpponent(evt);
            }
        });

        dashOpponentDuration.setModel(new javax.swing.SpinnerNumberModel(0, 0, 60, 1));
        dashOpponentDuration.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                dashOpponent(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(dashOpponentChanced, org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.dashOpponentChanced.text")); // NOI18N
        dashOpponentChanced.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                dashOpponent(evt);
            }
        });

        javax.swing.GroupLayout dashSubPaneLayout = new javax.swing.GroupLayout(dashSubPane);
        dashSubPane.setLayout(dashSubPaneLayout);
        dashSubPaneLayout.setHorizontalGroup(
            dashSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dashSubPaneLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(dashText)
                .addGap(18, 18, 18)
                .addComponent(dashUserChanced)
                .addGap(4, 4, 4)
                .addComponent(dashUserAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dashUserDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(dashOpponentChanced)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(dashOpponentAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dashOpponentDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(65, 65, 65))
        );
        dashSubPaneLayout.setVerticalGroup(
            dashSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dashSubPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(dashSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(dashSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(dashSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(dashSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(dashOpponentAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(dashOpponentDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(dashOpponentChanced))
                        .addGroup(dashSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(dashUserAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dashUserDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(dashUserChanced))
                    .addComponent(dashText))
                .addContainerGap())
        );

        invisibleText.setFont(new java.awt.Font("Tahoma", 0, 14));
        org.openide.awt.Mnemonics.setLocalizedText(invisibleText, org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.invisibleText.text")); // NOI18N
        invisibleText.setToolTipText(org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.invisibleText.toolTipText")); // NOI18N

        invisibleUserAmount.setModel(new javax.swing.SpinnerNumberModel(0, 0, 14, 1));
        invisibleUserAmount.setEnabled(false);
        invisibleUserAmount.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                invisibleUser(evt);
            }
        });

        invisibleUserDuration.setModel(new javax.swing.SpinnerNumberModel(0, 0, 60, 1));
        invisibleUserDuration.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                invisibleUser(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(invisibleUserChanced, org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.invisibleUserChanced.text")); // NOI18N
        invisibleUserChanced.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                invisibleUser(evt);
            }
        });

        invisibleOpponentAmount.setModel(new javax.swing.SpinnerNumberModel(0, 0, 14, 1));
        invisibleOpponentAmount.setEnabled(false);
        invisibleOpponentAmount.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                invisibleOpponent(evt);
            }
        });

        invisibleOpponentDuration.setModel(new javax.swing.SpinnerNumberModel(0, 0, 60, 1));
        invisibleOpponentDuration.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                invisibleOpponent(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(invisibleOpponentChanced, org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.invisibleOpponentChanced.text")); // NOI18N
        invisibleOpponentChanced.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                invisibleOpponent(evt);
            }
        });

        javax.swing.GroupLayout invisibleSubPaneLayout = new javax.swing.GroupLayout(invisibleSubPane);
        invisibleSubPane.setLayout(invisibleSubPaneLayout);
        invisibleSubPaneLayout.setHorizontalGroup(
            invisibleSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, invisibleSubPaneLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(invisibleText)
                .addGap(18, 18, 18)
                .addComponent(invisibleUserChanced)
                .addGap(4, 4, 4)
                .addComponent(invisibleUserAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(invisibleUserDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(invisibleOpponentChanced)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(invisibleOpponentAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(invisibleOpponentDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(65, 65, 65))
        );
        invisibleSubPaneLayout.setVerticalGroup(
            invisibleSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(invisibleSubPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(invisibleSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(invisibleSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(invisibleSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(invisibleSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(invisibleOpponentAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(invisibleOpponentDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(invisibleOpponentChanced))
                        .addGroup(invisibleSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(invisibleUserAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(invisibleUserDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(invisibleUserChanced))
                    .addComponent(invisibleText))
                .addContainerGap())
        );

        jumpText.setFont(new java.awt.Font("Tahoma", 0, 14));
        org.openide.awt.Mnemonics.setLocalizedText(jumpText, org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.jumpText.text")); // NOI18N
        jumpText.setToolTipText(org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.jumpText.toolTipText")); // NOI18N

        jumpUserAmount.setModel(new javax.swing.SpinnerNumberModel(0, 0, 10, 1));
        jumpUserAmount.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jumpUser(evt);
            }
        });

        jumpUserDuration.setModel(new javax.swing.SpinnerNumberModel(0, 0, 60, 1));
        jumpUserDuration.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jumpUser(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jumpUserChanced, org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.jumpUserChanced.text")); // NOI18N
        jumpUserChanced.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jumpUser(evt);
            }
        });

        jumpOpponentAmount.setModel(new javax.swing.SpinnerNumberModel(0, 0, 10, 1));
        jumpOpponentAmount.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jumpOpponent(evt);
            }
        });

        jumpOpponentDuration.setModel(new javax.swing.SpinnerNumberModel(0, 0, 60, 1));
        jumpOpponentDuration.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jumpOpponent(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jumpOpponentChanced, org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.jumpOpponentChanced.text")); // NOI18N
        jumpOpponentChanced.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jumpOpponent(evt);
            }
        });

        javax.swing.GroupLayout jumpSubPaneLayout = new javax.swing.GroupLayout(jumpSubPane);
        jumpSubPane.setLayout(jumpSubPaneLayout);
        jumpSubPaneLayout.setHorizontalGroup(
            jumpSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jumpSubPaneLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jumpText)
                .addGap(18, 18, 18)
                .addComponent(jumpUserChanced)
                .addGap(4, 4, 4)
                .addComponent(jumpUserAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jumpUserDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jumpOpponentChanced)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jumpOpponentAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jumpOpponentDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(65, 65, 65))
        );
        jumpSubPaneLayout.setVerticalGroup(
            jumpSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jumpSubPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jumpSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jumpSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jumpSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jumpSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jumpOpponentAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jumpOpponentDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jumpOpponentChanced))
                        .addGroup(jumpSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jumpUserAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jumpUserDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jumpUserChanced))
                    .addComponent(jumpText))
                .addContainerGap())
        );

        defenseText.setFont(new java.awt.Font("Tahoma", 0, 14));
        org.openide.awt.Mnemonics.setLocalizedText(defenseText, org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.defenseText.text")); // NOI18N
        defenseText.setToolTipText(org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.defenseText.toolTipText")); // NOI18N

        defenseUserAmount.setModel(new javax.swing.SpinnerNumberModel(0, 0, 14, 1));
        defenseUserAmount.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                defenseUser(evt);
            }
        });

        defenseUserDuration.setModel(new javax.swing.SpinnerNumberModel(0, 0, 60, 1));
        defenseUserDuration.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                defenseUser(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(defenseUserChanced, org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.defenseUserChanced.text")); // NOI18N
        defenseUserChanced.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                defenseUser(evt);
            }
        });

        defenseOpponentAmount.setModel(new javax.swing.SpinnerNumberModel(0, 0, 14, 1));
        defenseOpponentAmount.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                defenseOpponent(evt);
            }
        });

        defenseOpponentDuration.setModel(new javax.swing.SpinnerNumberModel(0, 0, 60, 1));
        defenseOpponentDuration.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                defenseOpponent(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(defenseOpponentChanced, org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.defenseOpponentChanced.text")); // NOI18N
        defenseOpponentChanced.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                defenseOpponent(evt);
            }
        });

        javax.swing.GroupLayout defenseSubPaneLayout = new javax.swing.GroupLayout(defenseSubPane);
        defenseSubPane.setLayout(defenseSubPaneLayout);
        defenseSubPaneLayout.setHorizontalGroup(
            defenseSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, defenseSubPaneLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(defenseText)
                .addGap(18, 18, 18)
                .addComponent(defenseUserChanced)
                .addGap(4, 4, 4)
                .addComponent(defenseUserAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(defenseUserDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(defenseOpponentChanced)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(defenseOpponentAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(defenseOpponentDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(65, 65, 65))
        );
        defenseSubPaneLayout.setVerticalGroup(
            defenseSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(defenseSubPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(defenseSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(defenseSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(defenseSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(defenseSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(defenseOpponentAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(defenseOpponentDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(defenseOpponentChanced))
                        .addGroup(defenseSubPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(defenseUserAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(defenseUserDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(defenseUserChanced))
                    .addComponent(defenseText))
                .addContainerGap())
        );

        javax.swing.GroupLayout statsPaneLayout = new javax.swing.GroupLayout(statsPane);
        statsPane.setLayout(statsPaneLayout);
        statsPaneLayout.setHorizontalGroup(
            statsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statsPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(statsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(statsPaneLayout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addGroup(statsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(immobolizeSubPane, javax.swing.GroupLayout.PREFERRED_SIZE, 386, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(paralyzeSubPane, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(mpLevelSubPane, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(statsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(speedSubPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(explainSubPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(hpSubPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(increaseLockOnRangeSubPane, javax.swing.GroupLayout.PREFERRED_SIZE, 453, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(statsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(statsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(explainSubPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(mpSubPane, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(confuseSubPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(invisibleSubPane, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(dashSubPane, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jumpSubPane, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(defenseSubPane, 0, 369, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        statsPaneLayout.setVerticalGroup(
            statsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statsPaneLayout.createSequentialGroup()
                .addGroup(statsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(statsPaneLayout.createSequentialGroup()
                        .addComponent(explainSubPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(hpSubPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(speedSubPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(immobolizeSubPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(paralyzeSubPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mpLevelSubPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(statsPaneLayout.createSequentialGroup()
                        .addComponent(explainSubPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mpSubPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(confuseSubPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(invisibleSubPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dashSubPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jumpSubPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(statsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(increaseLockOnRangeSubPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(defenseSubPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38))
        );

        mainTabbedPane.addTab(org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.statsPane.TabConstraints.tabTitle"), statsPane); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(dateModified, org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.dateModified.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(mainTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 864, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(253, 253, 253)
                        .addComponent(titleText, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(42, 42, 42)
                        .addComponent(dateModified)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(titleText)
                    .addComponent(dateModified))
                .addGap(4, 4, 4)
                .addComponent(mainTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 428, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        titleText.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(FlairDataEditorTopComponent.class, "FlairDataEditorTopComponent.titleText.AccessibleContext.accessibleName")); // NOI18N
    }// </editor-fold>//GEN-END:initComponents
// <editor-fold defaultstate="collapsed" desc="Setter Calls">
private void cardSeriesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cardSeriesActionPerformed
    setData("cardSeries", cardSeries.getSelectedItem());
//    EditorDirector.changed();
}//GEN-LAST:event_cardSeriesActionPerformed

private void cardTraitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cardTraitActionPerformed
    CardTrait t = (CardTrait) cardTrait.getSelectedItem();
    setData("cardTrait", t);
    if (t.equals(CardTrait.Damage)) {
        cardRange.setModel(new javax.swing.DefaultComboBoxModel(new CardRange[]{CardRange.Short, CardRange.Med, CardRange.Long}));
        toggleAttackTypePane(true);
    } else if (t.equals(CardTrait.Defense)) {
        cardRange.setModel(new javax.swing.DefaultComboBoxModel(new CardRange[]{CardRange.Self}));
        toggleAttackTypePane(false);
    } else if (t.equals(CardTrait.Enhance) || t.equals(CardTrait.Curse)) {
        cardRange.setModel(new javax.swing.DefaultComboBoxModel(new CardRange[]{CardRange.Misc}));
        toggleAttackTypePane(false);
    } else {
        throw new IllegalArgumentException("Can't find proper cardTrait");
    }
    cardRangeActionPerformed(new java.awt.event.ActionEvent(t, 0, null));
}//GEN-LAST:event_cardTraitActionPerformed

private void cardRangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cardRangeActionPerformed
    CardRange r = (CardRange) cardRange.getSelectedItem();
    setData("cardRange", r);
    if (r.equals(CardRange.Short) || r.equals(CardRange.Med) || r.equals(CardRange.Long)) {
        skillType.setModel(new javax.swing.DefaultComboBoxModel(new skillTypes[]{
                    skillTypes.projectile, skillTypes.mine, skillTypes.melee
                }));
        skillTypeExtended.setModel(new javax.swing.DefaultComboBoxModel(new skillTypesExtended[]{
                    skillTypesExtended.pierce, skillTypesExtended.knockback, skillTypesExtended.increaseKnockback
                }));
    } else if (r.equals(CardRange.Self)) {
        skillType.setModel(new javax.swing.DefaultComboBoxModel(new skillTypes[]{
                    skillTypes.barrier, skillTypes.shelter, skillTypes.counter, skillTypes.parry
                }));
        skillTypeExtended.setModel(new javax.swing.DefaultComboBoxModel(new skillTypesExtended[]{
                    skillTypesExtended.brush, skillTypesExtended.reflect, skillTypesExtended.antiPierce
                }));
    } else if (r.equals(CardRange.Misc)) {
        skillType.setModel(new javax.swing.DefaultComboBoxModel(new skillTypes[]{
                    skillTypes.instant, skillTypes.teamInstant
                }));
        skillTypeExtended.setModel(new javax.swing.DefaultComboBoxModel(new skillTypesExtended[]{
                    skillTypesExtended.user, skillTypesExtended.opp, skillTypesExtended.both
                }));
    } else {
        throw new IllegalArgumentException("Can't find proper cardRange");
    }
    skillTypeActionPerformed(new java.awt.event.ActionEvent(r, 0, null));
    skillTypeExtendedActionPerformed(new java.awt.event.ActionEvent(r, 0, null));
}//GEN-LAST:event_cardRangeActionPerformed

private void maxUseStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_maxUseStateChanged
    setData("maxUse", maxUse.getValue());
}//GEN-LAST:event_maxUseStateChanged

private void skillTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_skillTypeActionPerformed
    skillTypes s = (skillTypes) skillType.getSelectedItem();
    setData("skillType", s.toString());
}//GEN-LAST:event_skillTypeActionPerformed

private void skillTypeExtendedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_skillTypeExtendedActionPerformed
    skillTypesExtended s = (skillTypesExtended) skillTypeExtended.getSelectedItem();
    setData("skillTypeExtended", s.toString());
}//GEN-LAST:event_skillTypeExtendedActionPerformed

private void attkHomingStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_attkHomingStateChanged
    setData("attackHoming", attkHoming.getValue());
}//GEN-LAST:event_attkHomingStateChanged

private void attkVelocityStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_attkVelocityStateChanged
    setData("attackVelocity", attkVelocity.getValue());
}//GEN-LAST:event_attkVelocityStateChanged

private void attkCrawlerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attkCrawlerActionPerformed
    setData("attackCrawler", attkCrawler.isSelected());
}//GEN-LAST:event_attkCrawlerActionPerformed

private void attkPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attkPathActionPerformed
    setData("attackPath", attkPath.getSelectedItem());
}//GEN-LAST:event_attkPathActionPerformed

private void autoUseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoUseActionPerformed
    setData("autoUse", autoUse.isSelected());
}//GEN-LAST:event_autoUseActionPerformed

private void decreasePlayerKnockbackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decreasePlayerKnockbackActionPerformed
    setData("decreasePlayerKnockback", decreasePlayerKnockback.isSelected());
}//GEN-LAST:event_decreasePlayerKnockbackActionPerformed

private void shuffleSkillsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shuffleSkillsActionPerformed
    setData("shuffleSkills", shuffleSkills.isSelected());
}//GEN-LAST:event_shuffleSkillsActionPerformed

private void skillCostIncreaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_skillCostIncreaseActionPerformed
    setData("skillCostIncrease", skillCostIncrease.isSelected());
}//GEN-LAST:event_skillCostIncreaseActionPerformed

private void statusResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statusResetActionPerformed
    setData("StatusReset", statusReset.isSelected());
}//GEN-LAST:event_statusResetActionPerformed

private void skillDescriptionKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_skillDescriptionKeyTyped
    setData("skillDescription", skillDescription.getText());
}//GEN-LAST:event_skillDescriptionKeyTyped

private void hpUser(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_hpUser
    setData("hpUser", hpUserChanced.isSelected() + ":" + hpUserAmount.getValue() + ":" + hpUserDuration.getValue());
}//GEN-LAST:event_hpUser

private void hpOpponent(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_hpOpponent
    setData("hpOpponent", hpOpponentChanced.isSelected() + ":" + hpOpponentAmount.getValue() + ":" + hpOpponentDuration.getValue());
}//GEN-LAST:event_hpOpponent

private void mpUser(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_mpUser
    setData("mpUser", mpUserChanced.isSelected() + ":" + mpUserAmount.getValue() + ":" + mpUserDuration.getValue());
}//GEN-LAST:event_mpUser

private void mpOpponent(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_mpOpponent
    setData("mpOpponent", mpOpponentChanced.isSelected() + ":" + mpOpponentAmount.getValue() + ":" + mpOpponentDuration.getValue());
}//GEN-LAST:event_mpOpponent

private void speedUser(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_speedUser
    setData("speedUser", speedUserChanced.isSelected() + ":" + speedUserAmount.getValue() + ":" + speedUserDuration.getValue());
}//GEN-LAST:event_speedUser

private void speedOpponent(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_speedOpponent
    setData("speedOpponent", speedOpponentChanced.isSelected() + ":" + speedOpponentAmount.getValue() + ":" + speedOpponentDuration.getValue());
}//GEN-LAST:event_speedOpponent

private void confuseUser(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_confuseUser
    setData("confuseUser", confuseUserChanced.isSelected() + ":" + confuseUserAmount.getValue() + ":" + confuseUserDuration.getValue());
}//GEN-LAST:event_confuseUser

private void confuseOpponent(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_confuseOpponent
    setData("confuseOpponent", confuseOpponentChanced.isSelected() + ":" + confuseOpponentAmount.getValue() + ":" + confuseOpponentDuration.getValue());
}//GEN-LAST:event_confuseOpponent

private void immobolizeUser(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_immobolizeUser
    setData("immobolizeUser", immobolizeUserChanced.isSelected() + ":" + immobolizeUserAmount.getValue() + ":" + immobolizeUserDuration.getValue());
}//GEN-LAST:event_immobolizeUser

private void immobolizeOpponent(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_immobolizeOpponent
    setData("immobolizeOpponent", immobolizeOpponentChanced.isSelected() + ":" + immobolizeOpponentAmount.getValue() + ":" + immobolizeOpponentDuration.getValue());
}//GEN-LAST:event_immobolizeOpponent

private void invisibleUser(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_invisibleUser
    setData("invisibleUser", invisibleUserChanced.isSelected() + ":" + invisibleUserAmount.getValue() + ":" + invisibleUserDuration.getValue());
}//GEN-LAST:event_invisibleUser

private void invisibleOpponent(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_invisibleOpponent
    setData("invisibleOpponent", invisibleOpponentChanced.isSelected() + ":" + invisibleOpponentAmount.getValue() + ":" + invisibleOpponentDuration.getValue());
}//GEN-LAST:event_invisibleOpponent

private void paralyzeUser(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_paralyzeUser
    setData("paralyzeUser", paralyzeUserChanced.isSelected() + ":" + paralyzeUserAmount.getValue() + ":" + paralyzeUserDuration.getValue());
}//GEN-LAST:event_paralyzeUser

private void paralyzeOpponent(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_paralyzeOpponent
    setData("paralyzeOpponent", paralyzeOpponentChanced.isSelected() + ":" + paralyzeOpponentAmount.getValue() + ":" + paralyzeOpponentDuration.getValue());
}//GEN-LAST:event_paralyzeOpponent

private void dashUser(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_dashUser
    setData("dashUser", dashUserChanced.isSelected() + ":" + dashUserAmount.getValue() + ":" + dashUserDuration.getValue());
}//GEN-LAST:event_dashUser

private void dashOpponent(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_dashOpponent
    setData("dashOpponent", dashOpponentChanced.isSelected() + ":" + dashOpponentAmount.getValue() + ":" + dashOpponentDuration.getValue());
}//GEN-LAST:event_dashOpponent

private void mpLevelUser(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_mpLevelUser
    setData("mpLevelUser", mpLevelUserChanced.isSelected() + ":" + mpLevelUserAmount.getValue() + ":" + mpLevelUserDuration.getValue());
}//GEN-LAST:event_mpLevelUser

private void mpLevelOpponent(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_mpLevelOpponent
    setData("mpLevelOpponent", mpLevelOpponentChanced.isSelected() + ":" + mpLevelOpponentAmount.getValue() + ":" + mpLevelOpponentDuration.getValue());
}//GEN-LAST:event_mpLevelOpponent

private void jumpUser(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jumpUser
    setData("jumpUser", jumpUserChanced.isSelected() + ":" + jumpUserAmount.getValue() + ":" + jumpUserDuration.getValue());
}//GEN-LAST:event_jumpUser

private void jumpOpponent(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jumpOpponent
    setData("jumpOpponent", jumpOpponentChanced.isSelected() + ":" + jumpOpponentAmount.getValue() + ":" + jumpOpponentDuration.getValue());
}//GEN-LAST:event_jumpOpponent

private void increaseLockOnRangeUser(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_increaseLockOnRangeUser
    setData("increaseLockOnRangeUser", increaseLockOnRangeUserChanced.isSelected() + ":" + increaseLockOnRangeUserAmount.getValue() + ":" + increaseLockOnRangeUserDuration.getValue());
}//GEN-LAST:event_increaseLockOnRangeUser

private void increaseLockOnRangeOpponent(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_increaseLockOnRangeOpponent
    setData("increaseLockOnRangeOpponent", increaseLockOnRangeOpponentChanced.isSelected() + ":" + increaseLockOnRangeOpponentAmount.getValue() + ":" + increaseLockOnRangeOpponentDuration.getValue());
}//GEN-LAST:event_increaseLockOnRangeOpponent

private void defenseUser(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_defenseUser
    setData("defenseUser", defenseUserChanced.isSelected() + ":" + defenseUserAmount.getValue() + ":" + defenseUserDuration.getValue());
}//GEN-LAST:event_defenseUser

private void defenseOpponent(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_defenseOpponent
    setData("defenseOpponent", defenseOpponentChanced.isSelected() + ":" + defenseOpponentAmount.getValue() + ":" + defenseOpponentDuration.getValue());
}//GEN-LAST:event_defenseOpponent

private void eraseSkillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eraseSkillActionPerformed
    setData("eraseSkill", eraseSkill.getSelectedItem());
}//GEN-LAST:event_eraseSkillActionPerformed

private void attkDamageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attkDamageActionPerformed
    setData("attakDamage", attkDamage.getSelectedItem());
}//GEN-LAST:event_attkDamageActionPerformed

private void mpCostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mpCostActionPerformed
    setData("mpCost", mpCost.getSelectedItem());
}//GEN-LAST:event_mpCostActionPerformed

private void mpIncreaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mpIncreaseActionPerformed
    setData("mpIncrease", mpIncrease.getSelectedItem());
}//GEN-LAST:event_mpIncreaseActionPerformed
    // </editor-fold>
// <editor-fold defaultstate="collapsed" desc="Variables">
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox attkCrawler;
    private javax.swing.JLabel attkCrawlerText;
    private javax.swing.JComboBox attkDamage;
    private javax.swing.JLabel attkDamageText;
    private javax.swing.JSpinner attkHoming;
    private javax.swing.JLabel attkHomingText;
    private javax.swing.JComboBox attkPath;
    private javax.swing.JLabel attkPathText;
    private javax.swing.JSpinner attkVelocity;
    private javax.swing.JLabel attkVelocityText;
    private javax.swing.JPanel attributesPane;
    private javax.swing.JPanel atvPane;
    private javax.swing.JCheckBox autoUse;
    private javax.swing.JLabel autoUseText;
    private javax.swing.JPanel baPane;
    private javax.swing.JTextField cardName;
    private javax.swing.JLabel cardNameText;
    private javax.swing.JComboBox cardRange;
    private javax.swing.JLabel cardRangeText;
    private javax.swing.JComboBox cardSeries;
    private javax.swing.JLabel cardSeriesText;
    private javax.swing.JComboBox cardTrait;
    private javax.swing.JLabel cardTraitText;
    private javax.swing.JSpinner confuseOpponentAmount;
    private javax.swing.JCheckBox confuseOpponentChanced;
    private javax.swing.JSpinner confuseOpponentDuration;
    private javax.swing.JPanel confuseSubPane;
    private javax.swing.JLabel confuseText;
    private javax.swing.JSpinner confuseUserAmount;
    private javax.swing.JCheckBox confuseUserChanced;
    private javax.swing.JSpinner confuseUserDuration;
    private javax.swing.JPanel ctsPane;
    private javax.swing.JSpinner dashOpponentAmount;
    private javax.swing.JCheckBox dashOpponentChanced;
    private javax.swing.JSpinner dashOpponentDuration;
    private javax.swing.JPanel dashSubPane;
    private javax.swing.JLabel dashText;
    private javax.swing.JSpinner dashUserAmount;
    private javax.swing.JCheckBox dashUserChanced;
    private javax.swing.JSpinner dashUserDuration;
    private javax.swing.JLabel dateModified;
    private javax.swing.JCheckBox decreasePlayerKnockback;
    private javax.swing.JLabel decreasePlayerKnockbackText;
    private javax.swing.JSpinner defenseOpponentAmount;
    private javax.swing.JCheckBox defenseOpponentChanced;
    private javax.swing.JSpinner defenseOpponentDuration;
    private javax.swing.JPanel defenseSubPane;
    private javax.swing.JLabel defenseText;
    private javax.swing.JSpinner defenseUserAmount;
    private javax.swing.JCheckBox defenseUserChanced;
    private javax.swing.JSpinner defenseUserDuration;
    private javax.swing.JComboBox eraseSkill;
    private javax.swing.JLabel eraseSkillText;
    private javax.swing.JPanel explainSubPane;
    private javax.swing.JPanel explainSubPane2;
    private javax.swing.JSpinner hpOpponentAmount;
    private javax.swing.JCheckBox hpOpponentChanced;
    private javax.swing.JSpinner hpOpponentDuration;
    private javax.swing.JPanel hpSubPane;
    private javax.swing.JLabel hpText;
    private javax.swing.JSpinner hpUserAmount;
    private javax.swing.JCheckBox hpUserChanced;
    private javax.swing.JSpinner hpUserDuration;
    private javax.swing.JSpinner immobolizeOpponentAmount;
    private javax.swing.JCheckBox immobolizeOpponentChanced;
    private javax.swing.JSpinner immobolizeOpponentDuration;
    private javax.swing.JPanel immobolizeSubPane;
    private javax.swing.JLabel immobolizeText;
    private javax.swing.JSpinner immobolizeUserAmount;
    private javax.swing.JCheckBox immobolizeUserChanced;
    private javax.swing.JSpinner immobolizeUserDuration;
    private javax.swing.JSpinner increaseLockOnRangeOpponentAmount;
    private javax.swing.JCheckBox increaseLockOnRangeOpponentChanced;
    private javax.swing.JSpinner increaseLockOnRangeOpponentDuration;
    private javax.swing.JPanel increaseLockOnRangeSubPane;
    private javax.swing.JLabel increaseLockOnRangeText;
    private javax.swing.JSpinner increaseLockOnRangeUserAmount;
    private javax.swing.JCheckBox increaseLockOnRangeUserChanced;
    private javax.swing.JSpinner increaseLockOnRangeUserDuration;
    private javax.swing.JSpinner invisibleOpponentAmount;
    private javax.swing.JCheckBox invisibleOpponentChanced;
    private javax.swing.JSpinner invisibleOpponentDuration;
    private javax.swing.JPanel invisibleSubPane;
    private javax.swing.JLabel invisibleText;
    private javax.swing.JSpinner invisibleUserAmount;
    private javax.swing.JCheckBox invisibleUserChanced;
    private javax.swing.JSpinner invisibleUserDuration;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JSpinner jumpOpponentAmount;
    private javax.swing.JCheckBox jumpOpponentChanced;
    private javax.swing.JSpinner jumpOpponentDuration;
    private javax.swing.JPanel jumpSubPane;
    private javax.swing.JLabel jumpText;
    private javax.swing.JSpinner jumpUserAmount;
    private javax.swing.JCheckBox jumpUserChanced;
    private javax.swing.JSpinner jumpUserDuration;
    private javax.swing.JTabbedPane mainTabbedPane;
    private javax.swing.JSpinner maxUse;
    private javax.swing.JLabel maxUseText;
    private javax.swing.JComboBox mpCost;
    private javax.swing.JLabel mpCostText;
    private javax.swing.JComboBox mpIncrease;
    private javax.swing.JLabel mpIncreaseText;
    private javax.swing.JSpinner mpLevelOpponentAmount;
    private javax.swing.JCheckBox mpLevelOpponentChanced;
    private javax.swing.JSpinner mpLevelOpponentDuration;
    private javax.swing.JPanel mpLevelSubPane;
    private javax.swing.JLabel mpLevelText;
    private javax.swing.JSpinner mpLevelUserAmount;
    private javax.swing.JCheckBox mpLevelUserChanced;
    private javax.swing.JSpinner mpLevelUserDuration;
    private javax.swing.JSpinner mpOpponentAmount;
    private javax.swing.JCheckBox mpOpponentChanced;
    private javax.swing.JSpinner mpOpponentDuration;
    private javax.swing.JPanel mpSubPane;
    private javax.swing.JLabel mpText;
    private javax.swing.JSpinner mpUserAmount;
    private javax.swing.JCheckBox mpUserChanced;
    private javax.swing.JSpinner mpUserDuration;
    private javax.swing.JLabel opponentText;
    private javax.swing.JSpinner paralyzeOpponentAmount;
    private javax.swing.JCheckBox paralyzeOpponentChanced;
    private javax.swing.JSpinner paralyzeOpponentDuration;
    private javax.swing.JPanel paralyzeSubPane;
    private javax.swing.JLabel paralyzeText;
    private javax.swing.JSpinner paralyzeUserAmount;
    private javax.swing.JCheckBox paralyzeUserChanced;
    private javax.swing.JSpinner paralyzeUserDuration;
    private javax.swing.JScrollPane sdPane;
    private javax.swing.JCheckBox shuffleSkills;
    private javax.swing.JLabel shuffleSkillsText;
    private javax.swing.JCheckBox skillCostIncrease;
    private javax.swing.JLabel skillCostIncreaseText;
    private javax.swing.JTextArea skillDescription;
    private javax.swing.JComboBox skillType;
    private javax.swing.JComboBox skillTypeExtended;
    private javax.swing.JLabel skillTypeExtendedText;
    private javax.swing.JLabel skillTypeText;
    private javax.swing.JSpinner speedOpponentAmount;
    private javax.swing.JCheckBox speedOpponentChanced;
    private javax.swing.JSpinner speedOpponentDuration;
    private javax.swing.JPanel speedSubPane;
    private javax.swing.JLabel speedText;
    private javax.swing.JSpinner speedUserAmount;
    private javax.swing.JCheckBox speedUserChanced;
    private javax.swing.JSpinner speedUserDuration;
    private javax.swing.JPanel statsPane;
    private javax.swing.JCheckBox statusReset;
    private javax.swing.JLabel statusResetText;
    private javax.swing.JLabel titleText;
    private javax.swing.JLabel userText;
    // End of variables declaration//GEN-END:variables
    // </editor-fold>

    @Override
    public void componentOpened() {
        result = Utilities.actionsGlobalContext().lookupResult(Card.class);
        changed = Utilities.actionsGlobalContext().lookupResult(ChangeSupport.class);
        // Lookup lookup = WindowManager.getDefault().findTopComponent("FlairDataEditorTopComponent").getLookup();
        // Lookup lookup = getLookup();
        //result = lookup.lookupResult(Card.class);
        //changed = lookup.lookupResult(ChangeSupport.class);
        result.addLookupListener(this);
        changed.addLookupListener(this);
    }

    @Override
    public void componentClosed() {
        result.removeLookupListener(this);
        changed.removeLookupListener(this);
        result = null;
        changed = null;
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    public Card getCard() {
        try {
            return card;
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(null, "Card Object is not yet seletected\nUnable to alter stats");
            throw e;
        }
    }

    public void setData(String key, Object data) {
        if (card != null) {
            boolean dataChanged = getCard().setData(key, data);
            if (dataChanged) {
                changeSupport.fireChange();
            }
        }
    }
// <editor-fold defaultstate="collapsed" desc="Result Changed">

    @Override
    public void resultChanged(LookupEvent ev) {
        Lookup.Result r = (Lookup.Result) ev.getSource();
        java.util.Collection c = r.allInstances();
        if (!c.isEmpty()) {
            //JOptionPane.showMessageDialog(null, c.size()+"");
            Object one = c.iterator().next();
            //Object two = c.iterator().next();
            if (one instanceof ChangeSupport) {
                changeSupport = (ChangeSupport) one;
            } else {
                card = (Card) one;
                cardName.setText(card.getName());
                dateModified.setText("Date Last Modified: " + card.getDateModified().toString());
                cardSeries.setSelectedItem(card.getSeries());
                cardTrait.setSelectedItem(card.getTrait());
                cardRange.setSelectedItem(card.getRange());
                maxUse.setValue(card.getData("maxUse"));
                skillType.setSelectedItem(card.getData("skillType"));
                skillTypeExtended.setSelectedItem(card.getData("skillTypeExtended"));
                attkHoming.setValue(card.getData("attackHoming"));
                attkDamage.setSelectedItem(card.getData("attakDamage"));
                attkVelocity.setValue(card.getData("attackVelocity"));
                attkCrawler.setSelected((Boolean) card.getData("attackCrawler"));
                attkPath.setSelectedItem(card.getData("attackPath"));
                autoUse.setSelected((Boolean) card.getData("autoUse"));
                decreasePlayerKnockback.setSelected((Boolean) card.getData("decreasePlayerKnockback"));
                shuffleSkills.setSelected((Boolean) card.getData("shuffleSkills"));
                mpCost.setSelectedItem(card.getData("mpCost"));
                skillCostIncrease.setSelected((Boolean) card.getData("skillCostIncrease"));
                statusReset.setSelected((Boolean) card.getData("StatusReset"));
                eraseSkill.setSelectedItem(card.getData("eraseSkill"));
                mpIncrease.setSelectedItem(card.getData("mpIncrease"));
                skillDescription.setText((String) card.getData("skillDescription"));
                //HP
                String[] s = ((String) card.getData("hpUser")).split(":");
                hpUserChanced.setSelected(Boolean.parseBoolean(s[0]));
                hpUserAmount.setValue(Integer.parseInt(s[1]));
                hpUserDuration.setValue(Integer.parseInt(s[2]));
                s = ((String) card.getData("hpOpponent")).split(":");
                hpOpponentChanced.setSelected(Boolean.parseBoolean(s[0]));
                hpOpponentAmount.setValue(Integer.parseInt(s[1]));
                hpOpponentDuration.setValue(Integer.parseInt(s[2]));
                //Speed
                s = ((String) card.getData("speedUser")).split(":");
                speedUserChanced.setSelected(Boolean.parseBoolean(s[0]));
                speedUserAmount.setValue(Integer.parseInt(s[1]));
                speedUserDuration.setValue(Integer.parseInt(s[2]));
                s = ((String) card.getData("speedOpponent")).split(":");
                speedOpponentChanced.setSelected(Boolean.parseBoolean(s[0]));
                speedOpponentAmount.setValue(Integer.parseInt(s[1]));
                speedOpponentDuration.setValue(Integer.parseInt(s[2]));
                //immobolize
                s = ((String) card.getData("immobolizeUser")).split(":");
                immobolizeUserChanced.setSelected(Boolean.parseBoolean(s[0]));
                immobolizeUserAmount.setValue(Integer.parseInt(s[1]));
                immobolizeUserDuration.setValue(Integer.parseInt(s[2]));
                s = ((String) card.getData("immobolizeOpponent")).split(":");
                immobolizeOpponentChanced.setSelected(Boolean.parseBoolean(s[0]));
                immobolizeOpponentAmount.setValue(Integer.parseInt(s[1]));
                immobolizeOpponentDuration.setValue(Integer.parseInt(s[2]));
                //paralyze
                s = ((String) card.getData("paralyzeUser")).split(":");
                paralyzeUserChanced.setSelected(Boolean.parseBoolean(s[0]));
                paralyzeUserAmount.setValue(Integer.parseInt(s[1]));
                paralyzeUserDuration.setValue(Integer.parseInt(s[2]));
                s = ((String) card.getData("paralyzeOpponent")).split(":");
                paralyzeOpponentChanced.setSelected(Boolean.parseBoolean(s[0]));
                paralyzeOpponentAmount.setValue(Integer.parseInt(s[1]));
                paralyzeOpponentDuration.setValue(Integer.parseInt(s[2]));
                //mpLevel
                s = ((String) card.getData("mpLevelUser")).split(":");
                mpLevelUserChanced.setSelected(Boolean.parseBoolean(s[0]));
                mpLevelUserAmount.setValue(Integer.parseInt(s[1]));
                mpLevelUserDuration.setValue(Integer.parseInt(s[2]));
                s = ((String) card.getData("mpLevelOpponent")).split(":");
                mpLevelOpponentChanced.setSelected(Boolean.parseBoolean(s[0]));
                mpLevelOpponentAmount.setValue(Integer.parseInt(s[1]));
                mpLevelOpponentDuration.setValue(Integer.parseInt(s[2]));
                //Increase lock On Range
                s = ((String) card.getData("increaseLockOnRangeUser")).split(":");
                increaseLockOnRangeUserChanced.setSelected(Boolean.parseBoolean(s[0]));
                increaseLockOnRangeUserAmount.setValue(Integer.parseInt(s[1]));
                increaseLockOnRangeUserDuration.setValue(Integer.parseInt(s[2]));
                s = ((String) card.getData("increaseLockOnRangeOpponent")).split(":");
                increaseLockOnRangeOpponentChanced.setSelected(Boolean.parseBoolean(s[0]));
                increaseLockOnRangeOpponentAmount.setValue(Integer.parseInt(s[1]));
                increaseLockOnRangeOpponentDuration.setValue(Integer.parseInt(s[2]));
                //MP
                s = ((String) card.getData("mpUser")).split(":");
                mpUserChanced.setSelected(Boolean.parseBoolean(s[0]));
                mpUserAmount.setValue(Integer.parseInt(s[1]));
                mpUserDuration.setValue(Integer.parseInt(s[2]));
                s = ((String) card.getData("mpOpponent")).split(":");
                mpOpponentChanced.setSelected(Boolean.parseBoolean(s[0]));
                mpOpponentAmount.setValue(Integer.parseInt(s[1]));
                mpOpponentDuration.setValue(Integer.parseInt(s[2]));
                //confuse
                s = ((String) card.getData("confuseUser")).split(":");
                confuseUserChanced.setSelected(Boolean.parseBoolean(s[0]));
                confuseUserAmount.setValue(Integer.parseInt(s[1]));
                confuseUserDuration.setValue(Integer.parseInt(s[2]));
                s = ((String) card.getData("confuseOpponent")).split(":");
                confuseOpponentChanced.setSelected(Boolean.parseBoolean(s[0]));
                confuseOpponentAmount.setValue(Integer.parseInt(s[1]));
                confuseOpponentDuration.setValue(Integer.parseInt(s[2]));
                //invisible
                s = ((String) card.getData("invisibleUser")).split(":");
                invisibleUserChanced.setSelected(Boolean.parseBoolean(s[0]));
                invisibleUserAmount.setValue(Integer.parseInt(s[1]));
                invisibleUserDuration.setValue(Integer.parseInt(s[2]));
                s = ((String) card.getData("invisibleOpponent")).split(":");
                invisibleOpponentChanced.setSelected(Boolean.parseBoolean(s[0]));
                invisibleOpponentAmount.setValue(Integer.parseInt(s[1]));
                invisibleOpponentDuration.setValue(Integer.parseInt(s[2]));
                //dash
                s = ((String) card.getData("dashUser")).split(":");
                dashUserChanced.setSelected(Boolean.parseBoolean(s[0]));
                dashUserAmount.setValue(Integer.parseInt(s[1]));
                dashUserDuration.setValue(Integer.parseInt(s[2]));
                s = ((String) card.getData("dashOpponent")).split(":");
                dashOpponentChanced.setSelected(Boolean.parseBoolean(s[0]));
                dashOpponentAmount.setValue(Integer.parseInt(s[1]));
                dashOpponentDuration.setValue(Integer.parseInt(s[2]));
                //jump
                s = ((String) card.getData("jumpUser")).split(":");
                jumpUserChanced.setSelected(Boolean.parseBoolean(s[0]));
                jumpUserAmount.setValue(Integer.parseInt(s[1]));
                jumpUserDuration.setValue(Integer.parseInt(s[2]));
                s = ((String) card.getData("jumpOpponent")).split(":");
                jumpOpponentChanced.setSelected(Boolean.parseBoolean(s[0]));
                jumpOpponentAmount.setValue(Integer.parseInt(s[1]));
                jumpOpponentDuration.setValue(Integer.parseInt(s[2]));
                //defense
                s = ((String) card.getData("defenseUser")).split(":");
                defenseUserChanced.setSelected(Boolean.parseBoolean(s[0]));
                defenseUserAmount.setValue(Integer.parseInt(s[1]));
                defenseUserDuration.setValue(Integer.parseInt(s[2]));
                s = ((String) card.getData("defenseOpponent")).split(":");
                defenseOpponentChanced.setSelected(Boolean.parseBoolean(s[0]));
                defenseOpponentAmount.setValue(Integer.parseInt(s[1]));
                defenseOpponentDuration.setValue(Integer.parseInt(s[2]));
            }
        }
    }
    // </editor-fold>
}
