/*
 * To change this template, choose Tools | Templates and open the template in
 * the editor.
 */
package com.jme3.gde.core.particleemitter;

import com.jme3.gde.core.assets.EmitterDataObject;
import com.jme3.gde.core.scene.SceneApplication;
import com.jme3.post.SceneProcessor;
import java.util.Iterator;
import java.util.concurrent.Callable;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ActionMap;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.actions.MoveDownAction;
import org.openide.actions.MoveUpAction;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.BeanTreeView;
import org.openide.nodes.Node;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//com.gde.core.particleemitter//ParticleEmitterExplorer//EN",
autostore = false)
@TopComponent.Description(preferredID = "ParticleEmitterExplorerTopComponent",
iconBase="com/jme3/gde/core/particleemitter/icons/particle.gif", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "navigator", openAtStartup = true)
@ActionID(category = "Window", id = "com.gde.core.particleemitter.ParticleEmitterExplorerTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333*/)
@TopComponent.OpenActionRegistration(displayName = "#CTL_ParticleEmitterExplorerAction",
preferredID = "ParticleEmitterExplorerTopComponent")
@SuppressWarnings("unchecked")
public final class ParticleEmitterExplorerTopComponent extends TopComponent implements ExplorerManager.Provider{

     private static ParticleEmitterExplorerTopComponent instance;
    private static final String PREFERRED_ID = "ParticleEmitterExplorerTopComponent";
    private transient ExplorerManager explorerManager = new ExplorerManager();
    private EmitterDataObject currentFile;
    private ParticleEmitterProcessorNode node;
    private boolean added = false;
    
    public ParticleEmitterExplorerTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(ParticleEmitterExplorerTopComponent.class, "CTL_ParticleEmitterExplorerTopComponent"));
        setToolTipText(NbBundle.getMessage(ParticleEmitterExplorerTopComponent.class, "HINT_ParticleEmitterExplorerTopComponent"));
ActionMap map = getActionMap();
        map.put("delete", ExplorerUtils.actionDelete(explorerManager, true));
        map.put("moveup", new MoveUpAction());
        map.put("movedown", new MoveDownAction());
        associateLookup(ExplorerUtils.createLookup(explorerManager, map));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new BeanTreeView();
        jToolBar1 = new javax.swing.JToolBar();
        jPanel1 = new javax.swing.JPanel();

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 392, Short.MAX_VALUE));
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 21, Short.MAX_VALUE));

        jToolBar1.add(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE).addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE));
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 267, Short.MAX_VALUE)));
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables
    
    
    public void loadFile(EmitterDataObject object) {
        explorerManager.setRootContext(object.getLookup().lookup(ParticleEmitterProcessorNode.class));
        node = object.getLookup().lookup(ParticleEmitterProcessorNode.class);
        setActivatedNodes(new Node[]{object.getNodeDelegate()});
        open();
        if (currentFile != null && added) {
            setEmitterEnabled(false);
        }
        currentFile = object;
        if (added) {
            setEmitterEnabled(true);
        }
    }
    
    public synchronized void setEmitterEnabled(final boolean enabled) {
        if (added == enabled) {
            return;
        }
        if (currentFile != null) {
            added = enabled;
            final com.jme3.scene.Node fpp = this.node.getEmitterNode();
            SceneApplication.getApplication().enqueue(new Callable() {

                @Override
                public Object call() throws Exception {
                    if (enabled) {
                        SceneApplication.getApplication().getViewPort().attachScene(fpp);
                        Logger.getLogger(ParticleEmitterExplorerTopComponent.class.getName()).log(Level.INFO, "Enabled post filters");
                    } else {
                        for (Iterator<SceneProcessor> it = SceneApplication.getApplication().getViewPort().getProcessors().iterator(); it.hasNext();) {
                            SceneProcessor proc = it.next();
                            if (proc instanceof Node) {
                                it.remove();
                                proc.cleanup();
                            }
                        }
                        //  SceneApplication.getApplication().getViewPort().removeProcessor(fpp);
                        Logger.getLogger(ParticleEmitterExplorerTopComponent.class.getName()).log(Level.INFO, "Disabled post filters");
                    }
                    return null;
                }
            });

        }
    }
    
     /* Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link #findInstance}.
     */
    public static synchronized ParticleEmitterExplorerTopComponent getDefault() {
        if (instance == null) {
            instance = new ParticleEmitterExplorerTopComponent();
        }
        return instance;
    }
    
     /**
     * Obtain the SceneExplorerTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized ParticleEmitterExplorerTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            Logger.getLogger(ParticleEmitterExplorerTopComponent.class.getName()).warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof ParticleEmitterExplorerTopComponent) {
            return (ParticleEmitterExplorerTopComponent) win;
        }
        Logger.getLogger(ParticleEmitterExplorerTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID
                + "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }
    
    @Override
    public ExplorerManager getExplorerManager() {
        return explorerManager;
    }
    
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
